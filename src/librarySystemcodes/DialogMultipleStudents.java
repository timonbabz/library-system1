/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package librarySystemcodes;

import com.sun.glass.events.KeyEvent;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Color;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import static librarySystemcodes.LibraryHome.lblUserId;

/**
 *
 * @author TimonBabz
 */
public final class DialogMultipleStudents extends javax.swing.JDialog {

    /**
     * Creates new form DialogMultipleStudents
     * @param parent
     * @param modal
     */
    public static String bookID2, bookISBNList2, authorNameList2, titleNameList2, publisherList2,editionList2,categoryList2,loanList2,borrowedList2,systemIdList2;
    
    public static String issuebookID,issuebookISBNList, issueauthorNameList, issuetitleNameList,issuepublisherList,issueeditionList,issuecategoryList,issueloanList,issueborrowedList,issuesystemIdList;
    String[] issueColumnNames = {"Book ID","ISBN" ,"Author","Title", "Edition", "ID"};
    DefaultTableModel issueModel = new DefaultTableModel();
    
    public DialogMultipleStudents(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        displayBooksIssueStudents();
        loadcomboStock();
        maxStd.setText(LibrarySignIn.labelStdMax);
        maxNumberStd.setText(LibrarySignIn.labeldaystd);
        boxCat.setSelectedItem("default");
        
        String dayscountStd = maxNumberStd.getText();
        int countDayStd = Integer.parseInt(dayscountStd);
        
        Date date = new Date();
        chooserBorrowed.setMaxSelectableDate(date);
        chooserBorrowed.setMinSelectableDate(date);
        JTextFieldDateEditor dateChooser1 = (JTextFieldDateEditor)chooserBorrowed.getDateEditor();
        dateChooser1.setEditable(false);
        
        Calendar StdCal = Calendar.getInstance();
        StdCal.setTime(date);
        StdCal.add(Calendar.DATE, countDayStd);
        Date futuredateStd = StdCal.getTime();
        chooserDate.setMaxSelectableDate(futuredateStd);
        chooserDate.setMinSelectableDate(date);
        JTextFieldDateEditor dateChooser2 = (JTextFieldDateEditor)chooserDate.getDateEditor();
        dateChooser2.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMain = new javax.swing.JPanel();
        panelDetails = new javax.swing.JPanel();
        labelName = new javax.swing.JLabel();
        txtFname = new javax.swing.JTextField();
        labelForm = new javax.swing.JLabel();
        labelStdAdm = new javax.swing.JLabel();
        txtAdm = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        txtLname = new javax.swing.JTextField();
        txtForm = new javax.swing.JTextField();
        txtStream = new javax.swing.JTextField();
        labelTitle = new javax.swing.JLabel();
        pnaelFilter = new javax.swing.JPanel();
        boxCat = new javax.swing.JComboBox();
        txtBookID = new javax.swing.JTextField();
        txtTitle = new javax.swing.JTextField();
        lblSearchId = new javax.swing.JLabel();
        lblComboBox = new javax.swing.JLabel();
        lblTitleSearch = new javax.swing.JLabel();
        btnAll = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        panelTables = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        lblDateDue = new javax.swing.JLabel();
        chooserDate = new com.toedter.calendar.JDateChooser();
        btnRemove = new javax.swing.JButton();
        lblIssuingDate = new javax.swing.JLabel();
        chooserBorrowed = new com.toedter.calendar.JDateChooser();
        btnIssue = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table2 = new javax.swing.JTable();
        btnCancel = new javax.swing.JButton();
        numberTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        maxStd = new javax.swing.JLabel();
        labelMax = new javax.swing.JLabel();
        maxNumberStd = new javax.swing.JLabel();
        labelMax2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Library Management System");
        setResizable(false);

        panelMain.setBackground(new java.awt.Color(129, 186, 243));

        panelDetails.setBackground(new java.awt.Color(129, 186, 243));
        panelDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Student details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        labelName.setText("Name :");

        txtFname.setEditable(false);
        txtFname.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        txtFname.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        labelForm.setText("Form :");

        labelStdAdm.setText("Student adm :");

        txtAdm.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        txtAdm.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAdmKeyPressed(evt);
            }
        });

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Search_16.png"))); // NOI18N
        btnSearch.setContentAreaFilled(false);
        btnSearch.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearch.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Searchwhite_16.png"))); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        txtLname.setEditable(false);
        txtLname.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        txtLname.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtForm.setEditable(false);
        txtForm.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        txtForm.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtStream.setEditable(false);
        txtStream.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        txtStream.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout panelDetailsLayout = new javax.swing.GroupLayout(panelDetails);
        panelDetails.setLayout(panelDetailsLayout);
        panelDetailsLayout.setHorizontalGroup(
            panelDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDetailsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(panelDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(labelStdAdm)
                    .addComponent(labelName)
                    .addComponent(labelForm))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelDetailsLayout.createSequentialGroup()
                        .addComponent(txtFname, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtLname, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelDetailsLayout.createSequentialGroup()
                        .addComponent(txtForm, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtStream, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelDetailsLayout.createSequentialGroup()
                        .addComponent(txtAdm, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        panelDetailsLayout.setVerticalGroup(
            panelDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDetailsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtAdm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(labelStdAdm)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelName))
                .addGap(7, 7, 7)
                .addGroup(panelDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtForm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtStream, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelForm))
                .addContainerGap())
        );

        labelTitle.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        labelTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Bookscolor.png"))); // NOI18N
        labelTitle.setText("Issue multiple books to student");

        pnaelFilter.setBackground(new java.awt.Color(129, 186, 243));
        pnaelFilter.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Filter books to display in issuing table", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        boxCat.setBackground(new java.awt.Color(255, 255, 255));
        boxCat.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                boxCatItemStateChanged(evt);
            }
        });

        txtBookID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBookIDKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBookIDKeyTyped(evt);
            }
        });

        txtTitle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTitleKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTitleKeyTyped(evt);
            }
        });

        lblSearchId.setText("Book ID :");

        lblComboBox.setText("Book Category :");

        lblTitleSearch.setText("Book Title :");

        btnAll.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnAll.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Ok_16.png"))); // NOI18N
        btnAll.setText("Combine all");
        btnAll.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnAll.setContentAreaFilled(false);
        btnAll.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAll.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Okwhite_16.png"))); // NOI18N
        btnAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAllActionPerformed(evt);
            }
        });

        btnRefresh.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Refresh_16.png"))); // NOI18N
        btnRefresh.setText("Reload");
        btnRefresh.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnRefresh.setContentAreaFilled(false);
        btnRefresh.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRefresh.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Refreshwhite_16.png"))); // NOI18N
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnaelFilterLayout = new javax.swing.GroupLayout(pnaelFilter);
        pnaelFilter.setLayout(pnaelFilterLayout);
        pnaelFilterLayout.setHorizontalGroup(
            pnaelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnaelFilterLayout.createSequentialGroup()
                .addContainerGap(131, Short.MAX_VALUE)
                .addGroup(pnaelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblSearchId)
                    .addComponent(lblComboBox)
                    .addComponent(lblTitleSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnaelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnaelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(boxCat, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(98, 98, 98)
                .addGroup(pnaelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAll, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnaelFilterLayout.setVerticalGroup(
            pnaelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnaelFilterLayout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(btnAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(pnaelFilterLayout.createSequentialGroup()
                .addGroup(pnaelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSearchId)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnaelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(boxCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblComboBox))
                .addGap(7, 7, 7)
                .addGroup(pnaelFilterLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblTitleSearch))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        panelTables.setBackground(new java.awt.Color(129, 186, 243));

        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table1);

        btnAdd.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Addblack_16.png"))); // NOI18N
        btnAdd.setText("Add >");
        btnAdd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnAdd.setContentAreaFilled(false);
        btnAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAdd.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Add_16.png"))); // NOI18N
        btnAdd.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnAddMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnAddMouseExited(evt);
            }
        });
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(129, 186, 243));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        lblDateDue.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDateDue.setText("Due date :");

        chooserDate.setBackground(new java.awt.Color(129, 186, 243));

        btnRemove.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Eraseblack_16.png"))); // NOI18N
        btnRemove.setText("Remove selected");
        btnRemove.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnRemove.setContentAreaFilled(false);
        btnRemove.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRemove.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Erasered_16.png"))); // NOI18N
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        lblIssuingDate.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblIssuingDate.setText("Issuing date :");

        chooserBorrowed.setBackground(new java.awt.Color(129, 186, 243));

        btnIssue.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnIssue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/List_16.png"))); // NOI18N
        btnIssue.setText("Issue books in table");
        btnIssue.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnIssue.setContentAreaFilled(false);
        btnIssue.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnIssue.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/DoubleTick_16.png"))); // NOI18N
        btnIssue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIssueActionPerformed(evt);
            }
        });

        table2.setBackground(new java.awt.Color(204, 255, 255));
        table2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "ISBN", "Author", "Title", "Edition", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(table2);

        btnCancel.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Cancelblack_16.png"))); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnCancel.setContentAreaFilled(false);
        btnCancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancel.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Cancelred_16.png"))); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblIssuingDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDateDue, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(chooserBorrowed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chooserDate, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(38, 38, 38)
                        .addComponent(btnIssue, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))))
            .addComponent(jScrollPane2)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblIssuingDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chooserBorrowed, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chooserDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblDateDue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnIssue, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12))
        );

        numberTxt.setEditable(false);
        numberTxt.setBackground(new java.awt.Color(51, 51, 51));
        numberTxt.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        numberTxt.setForeground(new java.awt.Color(255, 255, 255));
        numberTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel1.setText("Books added");

        javax.swing.GroupLayout panelTablesLayout = new javax.swing.GroupLayout(panelTables);
        panelTables.setLayout(panelTablesLayout);
        panelTablesLayout.setHorizontalGroup(
            panelTablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTablesLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 575, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelTablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(numberTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        panelTablesLayout.setVerticalGroup(
            panelTablesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(panelTablesLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(panelTablesLayout.createSequentialGroup()
                .addGap(158, 158, 158)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numberTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        maxStd.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        maxStd.setText("max");

        labelMax.setText("Limit allowed for students :");

        maxNumberStd.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        maxNumberStd.setText("max");

        labelMax2.setText("Maximum days allowed :");

        javax.swing.GroupLayout panelMainLayout = new javax.swing.GroupLayout(panelMain);
        panelMain.setLayout(panelMainLayout);
        panelMainLayout.setHorizontalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addComponent(labelTitle)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(labelMax2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxNumberStd)
                        .addGap(18, 18, 18)
                        .addComponent(labelMax)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maxStd, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addComponent(panelDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(pnaelFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(panelTables, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        panelMainLayout.setVerticalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMainLayout.createSequentialGroup()
                .addContainerGap(8, Short.MAX_VALUE)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelTitle)
                    .addComponent(maxStd)
                    .addComponent(labelMax)
                    .addComponent(maxNumberStd, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(labelMax2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(pnaelFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelTables, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        int rowCount = table2.getRowCount()+1;
        String countRow = Integer.toString(rowCount);
        int rows = table1.getSelectedRow();
        String bookId3 = (String) table1.getModel().getValueAt(rows, 0);
        String author3 = (String) table1.getModel().getValueAt(rows, 2);
        if(txtAdm.getText().isEmpty()){
        JOptionPane.showMessageDialog(null, "Please enter the student ID first");
        txtAdm.requestFocus();}
        else{
        if(existsInTable(bookId3,author3) == true){
        JOptionPane.showMessageDialog(null, "Selected book is already added");}
        else{
        TableModel model1 = table1.getModel();
        int [] indexs = table1.getSelectedRows();
        Object [] row = new Object [6];
        DefaultTableModel model2 = (DefaultTableModel) table2.getModel();
        for(int k = 0;k < indexs.length;k++)
        {
            row[0] = model1.getValueAt(indexs[k], 0);
            row[1] = model1.getValueAt(indexs[k], 1);
            row[2] = model1.getValueAt(indexs[k], 2);
            row[3] = model1.getValueAt(indexs[k], 3);
            row[4] = model1.getValueAt(indexs[k], 4);
            row[5] = model1.getValueAt(indexs[k], 5);
            model2.addRow(row);
            numberTxt.setText(countRow);
        }
       }
     }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int rowCount = table2.getRowCount()-1;
        String countRow = Integer.toString(rowCount);
        DefaultTableModel model2 = (DefaultTableModel) table2.getModel();
        int[] selectedRows = table2.getSelectedRows();
        if (selectedRows.length > 0) {
            for (int i = selectedRows.length - 1; i >= 0; i--) {
                model2.removeRow(selectedRows[i]);
                numberTxt.setText(countRow);
            }
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        if(txtAdm.getText().isEmpty()){
        JOptionPane.showMessageDialog(null, "Please enter admission number to search");
        txtAdm.requestFocus();}
        else{
        retrieveStudentDetails();}
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtAdmKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAdmKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            if(txtAdm.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please enter admission number to search");
            txtAdm.requestFocus();}
            else{
            retrieveStudentDetails();}
        }
    }//GEN-LAST:event_txtAdmKeyPressed

    private void btnIssueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIssueActionPerformed
        String number = maxStd.getText();
        Date chooserdate = chooserBorrowed.getDate();
        Date chooserdate2 = chooserDate.getDate();
        int countRows = Integer.parseInt(number);
        if(table2.getRowCount() == 0){
        JOptionPane.showMessageDialog(null, "No books in the table to issue");}
        else if(lblUserId.getText().equalsIgnoreCase("Support Team")){
        JOptionPane.showMessageDialog(null, "'Support Team' cannot issue books, please log in with a different username");}
        else if(txtAdm.getText().isEmpty()){
        JOptionPane.showMessageDialog(null, "Please enter admission number to search");
            txtAdm.requestFocus();}
        else if(table2.getRowCount() > countRows){
            JOptionPane.showMessageDialog(null, "Maximum number of books allowed("+number+")  passed");}
        else if(chooserdate == null){
        JOptionPane.showMessageDialog(null, "Please select borrowed date");}
        else if(chooserdate2 == null){
        JOptionPane.showMessageDialog(null, "Please select due date");}
        else{
        int response = JOptionPane.showConfirmDialog(null, "Issue books in the table to "+txtFname.getText(),
                "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        switch (response) {
            case JOptionPane.NO_OPTION:
                break;
            case JOptionPane.CLOSED_OPTION:
                break;
            case JOptionPane.YES_OPTION:
            limitBorrowersStudents();
            refreshBooksAfterIssue();
            DefaultTableModel clearedModel = (DefaultTableModel) table2.getModel();
            clearedModel.setRowCount(0);
            numberTxt.setText("0");
        }
      }
    }//GEN-LAST:event_btnIssueActionPerformed

    private void btnAddMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseEntered
        btnAdd.setForeground(Color.WHITE);
    }//GEN-LAST:event_btnAddMouseEntered

    private void btnAddMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAddMouseExited
        btnAdd.setForeground(Color.BLACK);
    }//GEN-LAST:event_btnAddMouseExited

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        DefaultTableModel clearedModel = (DefaultTableModel) table2.getModel();
        clearedModel.setRowCount(0);
        txtAdm.setText("");
        txtFname.setText("");
        txtLname.setText("");
        txtForm.setText("");
        txtStream.setText("");
    }//GEN-LAST:event_btnCancelActionPerformed

    private void txtBookIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBookIDKeyPressed
         if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            if(txtBookID.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Enter the book ID");}
            else{
        refreshOnIdEnteredIssueStd();
            }
        }
    }//GEN-LAST:event_txtBookIDKeyPressed

    private void txtBookIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBookIDKeyTyped
        char c = evt.getKeyChar();
        if(Character.isAlphabetic(c)){
            refreshOnIdEnteredIssueStd();
        }else if(c == KeyEvent.VK_BACKSPACE || c == KeyEvent.VK_DELETE){
        //do nothing
        }
    }//GEN-LAST:event_txtBookIDKeyTyped

    private void boxCatItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_boxCatItemStateChanged
        String text = (String) boxCat.getSelectedItem();
        if (text.equals("default")) {
          refreshBooksAfterIssue();
        } else {
          refreshOnItemIssueStd();
        }
    }//GEN-LAST:event_boxCatItemStateChanged

    private void txtTitleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTitleKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            String titleEntered = txtTitle.getText();
            if(titleEntered.equals("")){
            JOptionPane.showMessageDialog(null, "Please enter the book title to search");
            txtTitle.requestFocus();}
            else{
                refreshOnIdIssueStd();}
        }
    }//GEN-LAST:event_txtTitleKeyPressed

    private void txtTitleKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTitleKeyTyped
        char c = evt.getKeyChar();
        if(Character.isAlphabetic(c)){
            refreshOnIdIssueStd();
        }else if(c == KeyEvent.VK_BACKSPACE || c == KeyEvent.VK_DELETE){
        //do nothing
        }
    }//GEN-LAST:event_txtTitleKeyTyped

    private void btnAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAllActionPerformed
        refreshOnAll();
    }//GEN-LAST:event_btnAllActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        refreshBooksAfterIssue();
    }//GEN-LAST:event_btnRefreshActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DialogMultipleStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DialogMultipleStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DialogMultipleStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DialogMultipleStudents.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            DialogMultipleStudents dialog = new DialogMultipleStudents(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }
    
    public void refreshOnIdEnteredIssueStd(){
    while(issueModel.getRowCount() != 0){
        issueModel.removeRow(0);}
    searchBooksIssueStudentsID();
}
    
    public void refreshOnItemIssueStd(){
    while(issueModel.getRowCount() != 0){
        issueModel.removeRow(0);}
    searchBooksIssueStudentsItem();
}
    
    public void refreshOnIdIssueStd(){
    while(issueModel.getRowCount() != 0){
        issueModel.removeRow(0);}
    searchBooksLongLoanStd();
}
    
    public void refreshOnAll(){
    while(issueModel.getRowCount() != 0){
        issueModel.removeRow(0);}
    searchBooksAll();
}
    
    public boolean existsInTable(String name, String size){
        int rowCount = table2.getRowCount();
        String row = null, tname = null, tsize = null, input = name+"|"+size;
        for(int i = 0; i < rowCount;i++)
        {
            tname = (String) table2.getValueAt(i,0);
            tsize = (String) table2.getValueAt(i, 2);
            row = tname+ "|"+tsize;
            if(input.equalsIgnoreCase(row)){
            return true;
            }
        }
        
        return false;
    }
    
    public void refreshBooksAfterIssue(){
        while(issueModel.getRowCount() != 0){
        issueModel.removeRow(0);}
        displayBooksIssueStudents();
    }
    
    public void displayBooksIssueStudents() {
    
        String loanType = "LONG";
        String boorrowedCondtion = "NO";

        issueModel.setColumnIdentifiers(issueColumnNames);

        table1.setModel(issueModel);

        table1.setFillsViewportHeight(true);

        try {

            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT  book_id,bklib_id,book_isbn,author,title,publisher_name,edition,subject_category FROM books_db WHERE (loan_type='"+ loanType +"' AND borrowed='"+ boorrowedCondtion +"')");
            ResultSet studentRs = st.executeQuery();
            
            int i = 0;
            while (studentRs.next()) {
                issuebookID = studentRs.getString("bklib_id");
                issuebookISBNList = studentRs.getString("book_isbn");
                issueauthorNameList = studentRs.getString("author");
                issuetitleNameList = studentRs.getString("title");
                issueeditionList = studentRs.getString("edition");
                issuesystemIdList = studentRs.getString("book_id");

                issueModel.addRow(new Object[]{issuebookID, issuebookISBNList, issueauthorNameList, issuetitleNameList,issueeditionList,issuesystemIdList});
                i++;

            }

            if (i < 1) {
               // JOptionPane.showMessageDialog(null, "all books for long loan have been issued", "Error", JOptionPane.ERROR_MESSAGE);
            }
         
        } catch (ClassNotFoundException | HeadlessException rt) {
            // System.out.println(rt);
            JOptionPane.showMessageDialog(null, rt.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            Logger.getLogger(DialogMultipleStudents.class.getName()).log(Level.SEVERE, null, ex);
        }

}
    
    public void retrieveStudentDetails() {
            String statusStd = "Active";
            try {
            
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb?useSSL = false", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT std_fname, std_lname, form,stream_name FROM student_list WHERE adm_no='"+ txtAdm.getText()+"' AND status='"+ statusStd +"'");
            ResultSet rsRetStd = st.executeQuery();
            boolean emptyRs = true;
            if (rsRetStd.next()) {
                emptyRs = false;
                String fname_std = rsRetStd.getString("std_fname").toUpperCase();
                txtFname.setText(fname_std);
                
                String lname_std = rsRetStd.getString("std_lname").toUpperCase();
                txtLname.setText(lname_std);
                
                String class_std = rsRetStd.getString("form");
                String class_stream = rsRetStd.getString("stream_name").toUpperCase();
                txtForm.setText(class_std);
                txtStream.setText(class_stream);

            }
            if (emptyRs) {
                JOptionPane.showMessageDialog(null, "Student not found or record for "+txtAdm.getText()+" has been closed");
                txtAdm.setText("");
                txtFname.setText("");
                txtLname.setText("");
                txtForm.setText("");
                txtStream.setText("");
            }
            
        } catch (ClassNotFoundException | SQLException | HeadlessException rt) {
            System.out.println(rt);
            JOptionPane.showMessageDialog(null, "No Record Found", "Error", JOptionPane.ERROR_MESSAGE); 
        }
        
    }
    
    public void issueToStudents(){
    String condi = "YES";
    String student = "STUDENT";
    String stdntID = txtAdm.getText().trim();
    String stdntFname = txtFname.getText().trim();
    String stdntLname = txtLname.getText().trim();
    SimpleDateFormat sdf = new SimpleDateFormat("MMM d, yyyy");
    String dateDue =  sdf.format(chooserDate.getDate());
    Date dateBorrowed = chooserBorrowed.getDate();
    String StdntClass = txtForm.getText();
    String streamNAme = txtStream.getText();
    String librarianName = LibrarySignIn.unameLabel;
    String librarianID = LibrarySignIn.userId;
    
    try{

        int rows = table2.getRowCount();
        Class.forName("com.mysql.jdbc.Driver");
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb?useSSL = false", "root", "libsystem@dmin");
        con.setAutoCommit(false);

        for(int row = 0; row<rows; row++)
        {
            String bookIdTable3 = (String)table2.getValueAt(row, 0);
            String bookIsbnIssue = (String)table2.getValueAt(row, 1);
            String titleIssue = (String)table2.getValueAt(row, 3);
            String bookIdTable2 = (String)table2.getValueAt(row, 5);
            
           String querycondi ="UPDATE books_db SET borrowed='" + condi + "',borrowed_by_id='" + stdntID + "'"
                        + ",name1_of_borrower='" + stdntFname + "',name2_of_borrower='" + stdntLname + "'"
                        + ",staff_std='" + student + "',date_due='" + dateDue + "',received_on=NULL ,date_borrowed='" + dateBorrowed + "'WHERE book_id=" + bookIdTable2;
           PreparedStatement pstCON = con.prepareStatement(querycondi);
           pstCON.execute();
           
           String queryco =  "INSERT INTO student_db " + "(adm_no, std_fname, std_lname, form,stream_name,"
                        + "date_borrowed, date_due,book_id,bklib_id,book_isbn,book_title,issued_by_id,issued_by_name)"
                            + "VALUES ('" + stdntID + "','"
                            + stdntFname + "','"
                            + stdntLname + "','"
                            + StdntClass + "','"
                            + streamNAme+ "','"
                            + dateBorrowed + "','"
                            + dateDue + "','"
                            + bookIdTable2 + "','"
                            + bookIdTable3 + "','"
                            + bookIsbnIssue + "','"
                            + titleIssue + "','"
                            + librarianID + "','"
                            + librarianName + "') ";
           PreparedStatement pst = con.prepareStatement(queryco);
           pst.execute();
           
           String sql3 = "INSERT INTO borrowers_db " + "(book_id,bklib_id,book_isbn,book_title,borrower_id, borrower_name1, borrower_name2,student_staff)"
                            + "VALUES ('" + bookIdTable2 + "','"
                            + bookIdTable3 + "','"
                            + bookIsbnIssue + "','"
                            + titleIssue + "','"
                            + stdntID + "','"
                            + stdntFname + "','"
                            + stdntLname + "','"
                            + student + "') ";
           
           PreparedStatement pstBorrowe = con.prepareStatement(sql3);
           pstBorrowe.execute();
  
        }
        con.commit();
        JOptionPane.showMessageDialog(null, rows+" book(s) issued to " + txtFname.getText() +" "+txtLname.getText());
        txtAdm.setText("");
        txtFname.setText("");
        txtLname.setText("");
        txtForm.setText("");
        txtStream.setText("");
        }
        catch(ClassNotFoundException | SQLException e){
            JOptionPane.showMessageDialog(this,e.getMessage());
       }

}
    
    public void limitBorrowersStudents(){
    
    String limitNo = txtAdm.getText().trim();
    String numberlimit = maxStd.getText();
    int noLimit = Integer.parseInt(numberlimit);
    
    try{
        Class.forName("com.mysql.jdbc.Driver");
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb?useSSL = false", "root", "libsystem@dmin");
        PreparedStatement os = con.prepareStatement("SELECT COUNT(borrower_id) AS borrowertimes_no FROM borrowers_db WHERE borrower_id='"+ limitNo +"' AND student_staff=\"STUDENT\"");
        ResultSet rsCs = os.executeQuery();
        
        int i = 0;
            if(rsCs.next())
            {    
                String limitCount = rsCs.getString("borrowertimes_no");
                int boroLimit = Integer.parseInt(limitCount);
                if(boroLimit < noLimit)
                {
                    issueToStudents();
                } else {
                    JOptionPane.showMessageDialog(null, "Limit of books borrowed reached");
                       }
            }
            
    }catch(ClassNotFoundException | SQLException | HeadlessException es){
    JOptionPane.showMessageDialog(null, es.getMessage());}
 }
    
    public void searchBooksIssueStudentsID() {
        
        String idSelected = txtBookID.getText().trim();
        String loanType = "LONG";
        String boorrowedCondtion = "NO";

        issueModel.setColumnIdentifiers(issueColumnNames);

        table1.setModel(issueModel);

        table1.setFillsViewportHeight(true);

        try {

            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT  book_id,bklib_id,book_isbn,author,title,publisher_name,edition,subject_category from books_db WHERE (loan_type='"+ loanType +"' AND borrowed='"+ boorrowedCondtion +"' AND bklib_id LIKE'"+ idSelected +"%' )");
            ResultSet studentRs = st.executeQuery();
            
            int i = 0;
            while (studentRs.next()) {
                issuebookID = studentRs.getString("bklib_id");
                issuebookISBNList = studentRs.getString("book_isbn");
                issueauthorNameList = studentRs.getString("author");
                issuetitleNameList = studentRs.getString("title");
                issueeditionList = studentRs.getString("edition");
                issuesystemIdList = studentRs.getString("book_id");

                issueModel.addRow(new Object[]{issuebookID, issuebookISBNList, issueauthorNameList, issuetitleNameList,issueeditionList,issuesystemIdList});
                i++;
            }

            if (i < 1) {
                //JOptionPane.showMessageDialog(null, "all books for long loan have been issued", "Error", JOptionPane.ERROR_MESSAGE);
            }
         
        } catch (ClassNotFoundException | SQLException | HeadlessException rt) {
            // System.out.println(rt);
            JOptionPane.showMessageDialog(null, rt.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

}
    
    public void loadcomboStock() {
    try
        {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT cat_name FROM bookcat_table");
            ResultSet rs = st.executeQuery();
            while(rs.next()){   
                boxCat.addItem(rs.getString("cat_name"));
                }
            con.close();
            }
        catch(Exception e)
        {
            //System.out.println("Error"+e);
        }    
}
    
    public void searchBooksIssueStudentsItem() {
        
        String itemSelected = (String) boxCat.getSelectedItem();
        String loanType = "LONG";
        String boorrowedCondtion = "NO";

        issueModel.setColumnIdentifiers(issueColumnNames);

        table1.setModel(issueModel);

        table1.setFillsViewportHeight(true);

        try {

            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT  book_id,bklib_id,book_isbn,author,title,publisher_name,edition,subject_category from books_db WHERE (loan_type='"+ loanType +"' AND borrowed='"+ boorrowedCondtion +"' AND subject_category='"+ itemSelected +"' )");
            ResultSet studentRs = st.executeQuery();
            
            int i = 0;
            while (studentRs.next()) {
                issuebookID = studentRs.getString("bklib_id");
                issuebookISBNList = studentRs.getString("book_isbn");
                issueauthorNameList = studentRs.getString("author");
                issuetitleNameList = studentRs.getString("title");
                issueeditionList = studentRs.getString("edition");
                issuesystemIdList = studentRs.getString("book_id");

                issueModel.addRow(new Object[]{issuebookID, issuebookISBNList, issueauthorNameList, issuetitleNameList,issueeditionList,issuesystemIdList});
                i++;
            }

            if (i < 1) {
                //JOptionPane.showMessageDialog(null, "all books for long loan have been issued", "Error", JOptionPane.ERROR_MESSAGE);
            }
         
        } catch (ClassNotFoundException | SQLException | HeadlessException rt) {
            // System.out.println(rt);
            JOptionPane.showMessageDialog(null, rt.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

}
    
    public void searchBooksLongLoanStd() {
    
        issueModel.setColumnIdentifiers(issueColumnNames);

        table1.setModel(issueModel);

        table1.setFillsViewportHeight(true);
       
        String longBkTitle = txtTitle.getText().toUpperCase().trim();
        
            try {

            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT book_id,bklib_id,book_isbn,author,title,publisher_name,edition,subject_category FROM books_db WHERE loan_type=\"LONG\" AND borrowed=\"NO\" AND title LIKE '"+ longBkTitle +"%'");
            ResultSet loanRs = st.executeQuery();
            
            int i = 0;
            while (loanRs.next()) {
                issuebookID = loanRs.getString("bklib_id");
                issuebookISBNList = loanRs.getString("book_isbn");
                issueauthorNameList = loanRs.getString("author");
                issuetitleNameList = loanRs.getString("title");
                issuepublisherList = loanRs.getString("publisher_name");
                issueeditionList = loanRs.getString("edition");
                issuecategoryList = loanRs.getString("subject_category");
                issuesystemIdList = loanRs.getString("book_id");

                issueModel.addRow(new Object[]{issuebookID, issuebookISBNList, issueauthorNameList, issuetitleNameList, issuepublisherList,issueeditionList,issuecategoryList,issuesystemIdList});
                i++;

            }

            if (i < 1) {
                JOptionPane.showMessageDialog(null, "This book is either issued, lost or not in the library database", "Error", JOptionPane.ERROR_MESSAGE);
                txtTitle.requestFocus();
            }
         
        } catch (ClassNotFoundException | SQLException | HeadlessException rt) {
            // System.out.println(rt);
            //JOptionPane.showMessageDialog(null, rt.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

}
    
     public void searchBooksAll() {
    
        issueModel.setColumnIdentifiers(issueColumnNames);

        table1.setModel(issueModel);

        table1.setFillsViewportHeight(true);
       
        String longBkTitle = txtTitle.getText().toUpperCase().trim();
        String bookIdEntered = txtBookID.getText();
        String bookCategory = (String) boxCat.getSelectedItem();
        
            try {

            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT book_id,bklib_id,book_isbn,author,title,publisher_name,edition,subject_category "
                    + "FROM books_db WHERE loan_type=\"LONG\" AND borrowed=\"NO\" AND title LIKE '"+ longBkTitle +"%' AND bklib_id='"+bookIdEntered+"' AND subject_category='"+bookCategory+"'");
            ResultSet loanRs = st.executeQuery();
            
            int i = 0;
            while (loanRs.next()) {
                issuebookID = loanRs.getString("bklib_id");
                issuebookISBNList = loanRs.getString("book_isbn");
                issueauthorNameList = loanRs.getString("author");
                issuetitleNameList = loanRs.getString("title");
                issuepublisherList = loanRs.getString("publisher_name");
                issueeditionList = loanRs.getString("edition");
                issuecategoryList = loanRs.getString("subject_category");
                issuesystemIdList = loanRs.getString("book_id");

                issueModel.addRow(new Object[]{issuebookID, issuebookISBNList, issueauthorNameList, issuetitleNameList, issuepublisherList,issueeditionList,issuecategoryList,issuesystemIdList});
                i++;

            }

            if (i < 1) {
                JOptionPane.showMessageDialog(null, "This book is either issued, lost or not in the library database", "Error", JOptionPane.ERROR_MESSAGE);
                txtTitle.requestFocus();
            }
         
        } catch (ClassNotFoundException | SQLException | HeadlessException rt) {
            // System.out.println(rt);
            //JOptionPane.showMessageDialog(null, rt.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox boxCat;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnAll;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnIssue;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSearch;
    private com.toedter.calendar.JDateChooser chooserBorrowed;
    private com.toedter.calendar.JDateChooser chooserDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel labelForm;
    private javax.swing.JLabel labelMax;
    private javax.swing.JLabel labelMax2;
    private javax.swing.JLabel labelName;
    private javax.swing.JLabel labelStdAdm;
    private javax.swing.JLabel labelTitle;
    private javax.swing.JLabel lblComboBox;
    private javax.swing.JLabel lblDateDue;
    private javax.swing.JLabel lblIssuingDate;
    private javax.swing.JLabel lblSearchId;
    private javax.swing.JLabel lblTitleSearch;
    private javax.swing.JLabel maxNumberStd;
    private javax.swing.JLabel maxStd;
    private javax.swing.JTextField numberTxt;
    private javax.swing.JPanel panelDetails;
    private javax.swing.JPanel panelMain;
    private javax.swing.JPanel panelTables;
    private javax.swing.JPanel pnaelFilter;
    private javax.swing.JTable table1;
    private javax.swing.JTable table2;
    private javax.swing.JTextField txtAdm;
    private javax.swing.JTextField txtBookID;
    private javax.swing.JTextField txtFname;
    private javax.swing.JTextField txtForm;
    private javax.swing.JTextField txtLname;
    private javax.swing.JTextField txtStream;
    private javax.swing.JTextField txtTitle;
    // End of variables declaration//GEN-END:variables
}
