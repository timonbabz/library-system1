/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package librarySystemcodes;

import com.sun.glass.events.KeyEvent;
import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import static librarySystemcodes.LibraryHome.lblUserId;

/**
 *
 * @author TimonBabz
 */
public final class DialogMultipleStaff extends javax.swing.JDialog {

    /**
     * Creates new form DialogMultipleStaff
     */
    public static String bookID2, bookISBNList2, authorNameList2, titleNameList2, publisherList2,editionList2,categoryList2,loanList2,borrowedList2,systemIdList2;
    
    public static String issuebookID,issuebookISBNList, issueauthorNameList, issuetitleNameList,issuepublisherList,issueeditionList,issuecategoryList,issueloanList,issueborrowedList,issuesystemIdList;
    String[] issueColumnNames = {"Book ID","ISBN" ,"Author","Title", "Edition", "ID"};
    DefaultTableModel issueModel = new DefaultTableModel();
    
    
    public DialogMultipleStaff(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        displayBooksIssueStaff();
        loadcomboStock();
        boxCat.setSelectedItem("default");
        lblMaxdays.setText(LibrarySignIn.labeldaystaff);
        maxNumberStaff.setText(LibrarySignIn.labelStaffMax);
        
        String dayscountStd = lblMaxdays.getText();
        int countDayStd = Integer.parseInt(dayscountStd);
        
        Date date = new Date();
        chooserBorrowed.setMaxSelectableDate(date);
        chooserBorrowed.setMinSelectableDate(date);
        JTextFieldDateEditor dateChooser1 = (JTextFieldDateEditor)chooserBorrowed.getDateEditor();
        dateChooser1.setEditable(false);
        
        Calendar StdCal = Calendar.getInstance();
        StdCal.setTime(date);
        StdCal.add(Calendar.DATE, countDayStd);
        Date futuredateStd = StdCal.getTime();
        chooserDate.setMaxSelectableDate(futuredateStd);
        chooserDate.setMinSelectableDate(date);
        JTextFieldDateEditor dateChooser2 = (JTextFieldDateEditor)chooserDate.getDateEditor();
        dateChooser2.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelMain = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        txtIdNumber = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtFname = new javax.swing.JTextField();
        txtLname = new javax.swing.JTextField();
        txtPhone = new javax.swing.JTextField();
        txtDept = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        txtBookID = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        comboType = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        txtTitle = new javax.swing.JTextField();
        txtAuth = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        boxCat = new javax.swing.JComboBox();
        btnReset = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        maxNumberStaff = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblMaxdays = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table2 = new javax.swing.JTable();
        chooserBorrowed = new com.toedter.calendar.JDateChooser();
        chooserDate = new com.toedter.calendar.JDateChooser();
        btnCancel = new javax.swing.JButton();
        btnIssue = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        btnAdd = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        table1 = new javax.swing.JTable();
        numberTxt = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        panelMain.setBackground(new java.awt.Color(129, 186, 243));

        jPanel1.setBackground(new java.awt.Color(129, 186, 243));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Staff details", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        jLabel4.setText("ID :");

        txtIdNumber.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        txtIdNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdNumberActionPerformed(evt);
            }
        });
        txtIdNumber.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtIdNumberKeyPressed(evt);
            }
        });

        jLabel5.setText("Name :");

        txtFname.setEditable(false);
        txtFname.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        txtFname.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtLname.setEditable(false);
        txtLname.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        txtLname.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtPhone.setEditable(false);
        txtPhone.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        txtPhone.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        txtDept.setEditable(false);
        txtDept.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        txtDept.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel6.setText("Phone :");

        jLabel7.setText("Dept :");

        btnSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Search_16.png"))); // NOI18N
        btnSearch.setContentAreaFilled(false);
        btnSearch.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Searchwhite_16.png"))); // NOI18N
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(txtIdNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtFname, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDept))
                            .addComponent(txtLname, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtIdNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtFname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Bookscolor.png"))); // NOI18N
        jLabel1.setText("Issue multiple to staff");

        jPanel2.setBackground(new java.awt.Color(129, 186, 243));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Search filters for issuing table", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        txtBookID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBookIDActionPerformed(evt);
            }
        });
        txtBookID.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBookIDKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtBookIDKeyTyped(evt);
            }
        });

        jLabel8.setText("Book ID :");

        jLabel9.setText("Loan type :");

        comboType.setBackground(new java.awt.Color(255, 255, 255));
        comboType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Select loan type:", "SHORT", "LONG" }));
        comboType.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboTypeItemStateChanged(evt);
            }
        });

        jLabel10.setText("Title :");

        txtTitle.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtTitleKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTitleKeyTyped(evt);
            }
        });

        txtAuth.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtAuthKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtAuthKeyTyped(evt);
            }
        });

        jLabel11.setText("Author :");

        jLabel12.setText("Category :");

        boxCat.setBackground(new java.awt.Color(255, 255, 255));
        boxCat.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                boxCatItemStateChanged(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnReset.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Ok_16.png"))); // NOI18N
        btnReset.setText("Reset fields");
        btnReset.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnReset.setContentAreaFilled(false);
        btnReset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnReset.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Okwhite_16.png"))); // NOI18N
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnRefresh.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Refresh_16.png"))); // NOI18N
        btnRefresh.setText("Reload");
        btnRefresh.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnRefresh.setContentAreaFilled(false);
        btnRefresh.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtAuth, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtTitle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboType, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(57, 57, 57)
                        .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(boxCat, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBookID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(btnRefresh, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(comboType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(txtTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel12)
                        .addComponent(boxCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtAuth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        maxNumberStaff.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        maxNumberStaff.setText("max");

        jLabel2.setText("Maximum books allowed :");

        lblMaxdays.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        lblMaxdays.setText("max");

        jLabel3.setText("Maximum days allowed :");

        jPanel3.setBackground(new java.awt.Color(129, 186, 243));

        jPanel4.setBackground(new java.awt.Color(129, 186, 243));
        jPanel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));

        table2.setBackground(new java.awt.Color(204, 255, 255));
        table2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Book ID", "ISBN", "Author", "Title", "Edition", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table2);

        chooserBorrowed.setBackground(new java.awt.Color(129, 186, 243));

        chooserDate.setBackground(new java.awt.Color(129, 186, 243));

        btnCancel.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Cancelblack_16.png"))); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnCancel.setContentAreaFilled(false);
        btnCancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancel.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Cancelred_16.png"))); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnIssue.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnIssue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/List_16.png"))); // NOI18N
        btnIssue.setText("Issue books in table");
        btnIssue.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnIssue.setContentAreaFilled(false);
        btnIssue.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnIssue.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/DoubleTick_16.png"))); // NOI18N
        btnIssue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnIssueActionPerformed(evt);
            }
        });

        btnRemove.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Eraseblack_16.png"))); // NOI18N
        btnRemove.setText("Remove selected");
        btnRemove.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnRemove.setContentAreaFilled(false);
        btnRemove.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnRemove.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Erasered_16.png"))); // NOI18N
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        jLabel13.setText("Issuing date :");

        jLabel14.setText("Date due :");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooserBorrowed, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(chooserDate, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnIssue, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chooserBorrowed, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chooserDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(47, 47, 47)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnIssue, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRemove, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18))
        );

        btnAdd.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Addblack_16.png"))); // NOI18N
        btnAdd.setText("Add >");
        btnAdd.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnAdd.setContentAreaFilled(false);
        btnAdd.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAdd.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Add_16.png"))); // NOI18N
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        table1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(table1);

        numberTxt.setEditable(false);
        numberTxt.setBackground(new java.awt.Color(51, 51, 51));
        numberTxt.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        numberTxt.setForeground(new java.awt.Color(255, 255, 255));
        numberTxt.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jLabel15.setText("Books added");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 614, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(btnAdd, javax.swing.GroupLayout.DEFAULT_SIZE, 79, Short.MAX_VALUE)
                        .addComponent(numberTxt))
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(123, 123, 123)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numberTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelMainLayout = new javax.swing.GroupLayout(panelMain);
        panelMain.setLayout(panelMainLayout);
        panelMainLayout.setHorizontalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblMaxdays)
                .addGap(42, 42, 42)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maxNumberStaff)
                .addGap(31, 31, 31))
            .addGroup(panelMainLayout.createSequentialGroup()
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(panelMainLayout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        panelMainLayout.setVerticalGroup(
            panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(maxNumberStaff, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addComponent(lblMaxdays)
                        .addComponent(jLabel3))
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtBookIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBookIDActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBookIDActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        int rowCount = table2.getRowCount()-1;
        String countRow = Integer.toString(rowCount);
        DefaultTableModel model2 = (DefaultTableModel) table2.getModel();
        int[] selectedRows = table2.getSelectedRows();
        if (selectedRows.length > 0) {
            for (int i = selectedRows.length - 1; i >= 0; i--) {
                model2.removeRow(selectedRows[i]);
                numberTxt.setText(countRow);
            }
        }
    }//GEN-LAST:event_btnRemoveActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        int rowCount = table2.getRowCount()+1;
        String countRow = Integer.toString(rowCount);
        int rows = table1.getSelectedRow();
        String bookId3 = (String) table1.getModel().getValueAt(rows, 0);
        String author3 = (String) table1.getModel().getValueAt(rows, 2);
        if(txtIdNumber.getText().isEmpty()){
        JOptionPane.showMessageDialog(null, "Please enter the staff ID first");
        txtIdNumber.requestFocus();}
        else{
        if(existsInTable(bookId3,author3) == true){
        JOptionPane.showMessageDialog(null, "Selected book is already added");}
        else{
        TableModel model1 = table1.getModel();
        int [] indexs = table1.getSelectedRows();
        Object [] row = new Object [6];
        DefaultTableModel model2 = (DefaultTableModel) table2.getModel();
        for(int k = 0;k < indexs.length;k++)
        {
            row[0] = model1.getValueAt(indexs[k], 0);
            row[1] = model1.getValueAt(indexs[k], 1);
            row[2] = model1.getValueAt(indexs[k], 2);
            row[3] = model1.getValueAt(indexs[k], 3);
            row[4] = model1.getValueAt(indexs[k], 4);
            row[5] = model1.getValueAt(indexs[k], 5);
            model2.addRow(row);
            numberTxt.setText(countRow);
        }
       }
     }
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        if(txtIdNumber.getText().isEmpty()){
        JOptionPane.showMessageDialog(null, "Please enter staff ID number");}
        else{retrieveStaffDetails();}
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtIdNumberKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdNumberKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
        if(txtIdNumber.getText().isEmpty()){
        JOptionPane.showMessageDialog(null, "Please enter staff ID number");}
        else{retrieveStaffDetails();}
        }
    }//GEN-LAST:event_txtIdNumberKeyPressed

    private void btnIssueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnIssueActionPerformed
        String number = maxNumberStaff.getText();
        Date chooserdate = chooserBorrowed.getDate();
        Date chooserdate2 = chooserDate.getDate();
        int countRows = Integer.parseInt(number);
        if(table2.getRowCount() == 0){
        JOptionPane.showMessageDialog(null, "No books in the table to issue");}
        else if(lblUserId.getText().equalsIgnoreCase("Support Team")){
        JOptionPane.showMessageDialog(null, "'Support Team' cannot issue books, please log in with a different username");}
        else if(txtIdNumber.getText().isEmpty()){
        JOptionPane.showMessageDialog(null, "ID number is required");
            txtIdNumber.requestFocus();}
        else if(table2.getRowCount() > countRows){
            JOptionPane.showMessageDialog(null, "Maximum number of books allowed("+number+")  passed");}
        else if(chooserdate == null){
        JOptionPane.showMessageDialog(null, "Please select borrowed date");}
        else if(chooserdate2 == null){
        JOptionPane.showMessageDialog(null, "Please select due date");}
        else{
        int response = JOptionPane.showConfirmDialog(null, "Issue books in the table to "+txtFname.getText(),
                "Confirm", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        switch (response) {
            case JOptionPane.NO_OPTION:
                break;
            case JOptionPane.CLOSED_OPTION:
                break;
            case JOptionPane.YES_OPTION:
            limitBorrowersStaff();
            refreshBooksAfterIssue();
            DefaultTableModel clearedModel = (DefaultTableModel) table2.getModel();
            clearedModel.setRowCount(0);
            numberTxt.setText("0");
        }
       }
    }//GEN-LAST:event_btnIssueActionPerformed

    private void txtIdNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdNumberActionPerformed
        if(txtIdNumber.getText().isEmpty()){
        txtFname.setText("");
        txtLname.setText("");
        txtPhone.setText("");
        txtDept.setText("");}
    }//GEN-LAST:event_txtIdNumberActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        DefaultTableModel clearedModel = (DefaultTableModel) table2.getModel();
        clearedModel.setRowCount(0);
        txtIdNumber.setText("");
        txtFname.setText("");
        txtLname.setText("");
        txtPhone.setText("");
        txtDept.setText("");
    }//GEN-LAST:event_btnCancelActionPerformed

    private void txtBookIDKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBookIDKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            if(txtBookID.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Enter the book ID");}
            else{
        refreshOnIdEntered();
            }
        }
    }//GEN-LAST:event_txtBookIDKeyPressed

    private void txtBookIDKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBookIDKeyTyped
        char c = evt.getKeyChar();
        if(Character.isAlphabetic(c)){
        refreshOnIdEntered();
            }else if(c == KeyEvent.VK_BACKSPACE || c == KeyEvent.VK_DELETE){
        //do nothing
        }
    }//GEN-LAST:event_txtBookIDKeyTyped

    private void txtTitleKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTitleKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            String titleEntered = txtTitle.getText();
            if(titleEntered.equals("")){
            JOptionPane.showMessageDialog(null, "Please enter the book title to search");
            txtTitle.requestFocus();}
            else{
                refreshOnTitle();}
        }
    }//GEN-LAST:event_txtTitleKeyPressed

    private void txtTitleKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTitleKeyTyped
           char c = evt.getKeyChar();
        if(Character.isAlphabetic(c)){
                refreshOnTitle();}
        else if(c == KeyEvent.VK_BACKSPACE || c == KeyEvent.VK_DELETE){
        //do nothing
        }
    }//GEN-LAST:event_txtTitleKeyTyped

    private void boxCatItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_boxCatItemStateChanged
        String text = (String) boxCat.getSelectedItem();
        if (text.equals("default")) {
          refreshBooksAfterIssue();
        } else {
          refreshOnCat();
        }
    }//GEN-LAST:event_boxCatItemStateChanged

    private void comboTypeItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboTypeItemStateChanged
        String text = (String) comboType.getSelectedItem();
        if (text.equals("Select loan type:")) {
          refreshBooksAfterIssue();
        } else {
          refreshOnLoan();
        }
    }//GEN-LAST:event_comboTypeItemStateChanged

    private void txtAuthKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAuthKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            String titleEntered = txtAuth.getText();
            if(titleEntered.equals("")){
            JOptionPane.showMessageDialog(null, "Please enter the book's author to search");
            txtAuth.requestFocus();}
            else{
        refreshOnAuth();}
        }
    }//GEN-LAST:event_txtAuthKeyPressed

    private void txtAuthKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtAuthKeyTyped
        char c = evt.getKeyChar();
        if(Character.isAlphabetic(c)){
        refreshOnAuth();}
        else if(c == KeyEvent.VK_BACKSPACE || c == KeyEvent.VK_DELETE){
        //do nothing
        }
    }//GEN-LAST:event_txtAuthKeyTyped

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        txtBookID.setText("");
        txtTitle.setText("");
        txtAuth.setText("");
        comboType.setSelectedIndex(0);
        boxCat.setSelectedItem("default");
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        refreshBooksAfterIssue();
    }//GEN-LAST:event_btnRefreshActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DialogMultipleStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DialogMultipleStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DialogMultipleStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DialogMultipleStaff.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            DialogMultipleStaff dialog = new DialogMultipleStaff(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }
    
        public boolean existsInTable(String name, String size){
        int rowCount = table2.getRowCount();
        String row = null, tname = null, tsize = null, input = name+"|"+size;
        for(int i = 0; i < rowCount;i++)
        {
            tname = (String) table2.getValueAt(i,0);
            tsize = (String) table2.getValueAt(i, 2);
            row = tname+ "|"+tsize;
            if(input.equalsIgnoreCase(row)){
            return true;
            }
        }
        
        return false;
    }
        
    public void refreshBooksAfterIssue(){
        while(issueModel.getRowCount() != 0){
        issueModel.removeRow(0);}
        displayBooksIssueStaff();
    }
    
public void refreshOnIdEntered(){
    while(issueModel.getRowCount() != 0){
        issueModel.removeRow(0);}
    searchBooksIssueStaffID();
}

    public void refreshOnTitle(){
    while(issueModel.getRowCount() != 0){
        issueModel.removeRow(0);}
    searchBooksTitle();
}
    
public void refreshOnCat(){
    while(issueModel.getRowCount() != 0){
        issueModel.removeRow(0);}
    searchBooksIssueItem();
}

public void refreshOnLoan(){
    while(issueModel.getRowCount() != 0){
        issueModel.removeRow(0);}
    searchBooksLoanItem();
}

public void refreshOnAuth(){
    while(issueModel.getRowCount() != 0){
        issueModel.removeRow(0);}
    searchBooksAuth();
}
        
    public void displayBooksIssueStaff() {
    
        String boorrowedCondtion = "NO";

        issueModel.setColumnIdentifiers(issueColumnNames);

        table1.setModel(issueModel);

        table1.setFillsViewportHeight(true);

        try {

            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT  book_id,bklib_id,book_isbn,author,title,publisher_name,edition,subject_category FROM books_db WHERE  borrowed='"+ boorrowedCondtion +"'");
            ResultSet studentRs = st.executeQuery();
            
            int i = 0;
            while (studentRs.next()) {
                issuebookID = studentRs.getString("bklib_id");
                issuebookISBNList = studentRs.getString("book_isbn");
                issueauthorNameList = studentRs.getString("author");
                issuetitleNameList = studentRs.getString("title");
                issueeditionList = studentRs.getString("edition");
                issuesystemIdList = studentRs.getString("book_id");

                issueModel.addRow(new Object[]{issuebookID, issuebookISBNList, issueauthorNameList, issuetitleNameList,issueeditionList,issuesystemIdList});
                i++;

            }

            if (i < 1) {
               // JOptionPane.showMessageDialog(null, "all books for long loan have been issued", "Error", JOptionPane.ERROR_MESSAGE);
            }
         
        } catch (ClassNotFoundException | HeadlessException rt) {
            // System.out.println(rt);
            JOptionPane.showMessageDialog(null, rt.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            Logger.getLogger(DialogMultipleStudents.class.getName()).log(Level.SEVERE, null, ex);
        }

}
    
    public void retrieveStaffDetails() {
    
            String statusStaff = "Active";
            try {
            
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb?useSSL = false", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT staff_fname, staff_lname, dept, phone_no FROM staff_table WHERE id_number='"+ txtIdNumber.getText()+"' AND status='"+ statusStaff +"'");
            ResultSet rsRetStd = st.executeQuery();
            boolean emptyRs = true;
            if (rsRetStd.next()) {
                emptyRs = false;
                String fname_stf = rsRetStd.getString("staff_fname").toUpperCase();
                txtFname.setText(fname_stf);
                
                String lname_stf = rsRetStd.getString("staff_lname").toUpperCase();
                txtLname.setText(lname_stf);
                
                String deptName = rsRetStd.getString("dept").toUpperCase();
                txtDept.setText(deptName);
                
                String phoneNo = rsRetStd.getString("phone_no");
                txtPhone.setText(phoneNo);

            }
            if (emptyRs) {
                JOptionPane.showMessageDialog(null, "Staff not found in the library records or record is closed");
                txtIdNumber.setText("");
                txtFname.setText("");
                txtLname.setText("");
                txtDept.setText("");
                txtPhone.setText("");
            }
            
        } catch (ClassNotFoundException | SQLException | HeadlessException rt) {
            System.out.println(rt);
            JOptionPane.showMessageDialog(null, "No Record Found", "Error", JOptionPane.ERROR_MESSAGE); 
        }
        
    }
    
    public void limitBorrowersStaff(){
    
    String limitNo = txtIdNumber.getText().trim();
    String numberlimit = maxNumberStaff.getText();
    int noLimit = Integer.parseInt(numberlimit);
    
    try{
        Class.forName("com.mysql.jdbc.Driver");
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb?useSSL = false", "root", "libsystem@dmin");
        PreparedStatement os = con.prepareStatement("SELECT COUNT(borrower_id) AS borrowertimes_no FROM borrowers_db WHERE borrower_id='"+ limitNo +"' AND student_staff=\"STAFF\"");
        ResultSet rsCs = os.executeQuery();
        //
        int i = 0;
            if(rsCs.next())
            {    
                String limitCount = rsCs.getString("borrowertimes_no");
                int boroLimit = Integer.parseInt(limitCount);
                if(boroLimit < noLimit)
                {
                    issueToStaff();
                } else {
                    JOptionPane.showMessageDialog(null, "Limit of books borrowed reached");
                       }
            }
            
            else{}
                
    }catch(ClassNotFoundException | SQLException | HeadlessException es){
    JOptionPane.showMessageDialog(null, es.getMessage());}
 }
    
    public void issueToStaff(){
        SimpleDateFormat sdf = new SimpleDateFormat("MMM d, yyyy");
        String dateDue =  sdf.format(chooserDate.getDate());
        String staffID = txtIdNumber.getText().toUpperCase().trim();
        String staffFname = txtFname.getText().toUpperCase().trim();
        String staffLname = txtLname.getText().toUpperCase().trim();
        String StaffDept = txtDept.getText().toUpperCase().trim();
        String phoneNo = txtPhone.getText().trim();
        Date dateBorrowed = chooserBorrowed.getDate();
        String staff = "STAFF";
        String condi = "YES";
        String librarianName = LibrarySignIn.unameLabel;
        String librarianID = LibrarySignIn.userId;
    
    try{

        int rows = table2.getRowCount();
        Class.forName("com.mysql.jdbc.Driver");
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb?useSSL = false", "root", "libsystem@dmin");
        con.setAutoCommit(false);

        for(int row = 0; row<rows; row++)
        {
            String bookIdTable3 = (String)table2.getValueAt(row, 0);
            String bookIsbnIssue = (String)table2.getValueAt(row, 1);
            String titleIssue = (String)table2.getValueAt(row, 3);
            String bookIdTable2 = (String)table2.getValueAt(row, 5);
            
           String querycondi ="UPDATE books_db SET borrowed='" + condi + "',borrowed_by_id='" + staffID + "'"
                        + ",name1_of_borrower='" + staffFname + "',name2_of_borrower='" + staffLname + "'"
                        + ",staff_std='" + staff + "',date_due='" + dateDue + "',received_on=NULL ,date_borrowed='" + dateBorrowed + "'WHERE book_id=" + bookIdTable2;
           PreparedStatement pstCON = con.prepareStatement(querycondi);
           pstCON.execute();
           
           String queryco = "INSERT INTO staff_db " + "(id_number, staff_fname, staff_lname, dept, "
                        + "date_borrowed,date_due,book_id,bklib_id,book_isbn,book_title,phone_no,issued_by,issued_by_id)"
                            + "VALUES ('" + staffID + "','"
                            + staffFname + "','"
                            + staffLname + "','"
                            + StaffDept + "','"
                            + dateBorrowed + "','"
                            + dateDue + "','"
                            + bookIdTable2 + "','"
                            + bookIdTable3 + "','"
                            + bookIsbnIssue + "','"
                            + titleIssue + "','"
                            + phoneNo + "','"
                            + librarianName + "','"
                            + librarianID + "') ";
           PreparedStatement pst = con.prepareStatement(queryco);
           pst.execute();
           
           String sql3 =  "INSERT INTO borrowers_db " + "(book_id,bklib_id,book_isbn,book_title,borrower_id, borrower_name1, borrower_name2,student_staff)"
                            + "VALUES ('" + bookIdTable2 + "','"
                            + bookIdTable3 + "','"
                            + bookIsbnIssue + "','"
                            + titleIssue + "','"
                            + staffID + "','"
                            + staffFname + "','"
                            + staffLname + "','"
                            + staff + "') ";
           
           PreparedStatement pstBorrowe = con.prepareStatement(sql3);
           pstBorrowe.execute();
  
        }
        con.commit();
        JOptionPane.showMessageDialog(null, rows+" book(s) issued to " + txtFname.getText() +" "+txtLname.getText());
        txtIdNumber.setText("");
        txtFname.setText("");
        txtLname.setText("");
        txtPhone.setText("");
        txtDept.setText("");
        }
        catch(ClassNotFoundException | SQLException e){
            JOptionPane.showMessageDialog(this,e.getMessage());
       }

}
    
        public void searchBooksIssueStaffID() {
        
        String idSelected = txtBookID.getText().trim();
        String boorrowedCondtion = "NO";

        issueModel.setColumnIdentifiers(issueColumnNames);

        table1.setModel(issueModel);

        table1.setFillsViewportHeight(true);

        try {

            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT  book_id,bklib_id,book_isbn,author,title,publisher_name,edition,subject_category from books_db WHERE (borrowed='"+ boorrowedCondtion +"' AND bklib_id LIKE'"+ idSelected +"%' )");
            ResultSet studentRs = st.executeQuery();
            
            int i = 0;
            while (studentRs.next()) {
                issuebookID = studentRs.getString("bklib_id");
                issuebookISBNList = studentRs.getString("book_isbn");
                issueauthorNameList = studentRs.getString("author");
                issuetitleNameList = studentRs.getString("title");
                issueeditionList = studentRs.getString("edition");
                issuesystemIdList = studentRs.getString("book_id");

                issueModel.addRow(new Object[]{issuebookID, issuebookISBNList, issueauthorNameList, issuetitleNameList,issueeditionList,issuesystemIdList});
                i++;
            }

            if (i < 1) {
                //JOptionPane.showMessageDialog(null, "all books for long loan have been issued", "Error", JOptionPane.ERROR_MESSAGE);
            }
         
        } catch (ClassNotFoundException | SQLException | HeadlessException rt) {
            // System.out.println(rt);
            JOptionPane.showMessageDialog(null, rt.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

}
        
        public void searchBooksTitle() {
    
        issueModel.setColumnIdentifiers(issueColumnNames);

        table1.setModel(issueModel);

        table1.setFillsViewportHeight(true);
       
        String longBkTitle = txtTitle.getText().toUpperCase().trim();
        
            try {

            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT book_id,bklib_id,book_isbn,author,title,publisher_name,edition,subject_category FROM books_db WHERE borrowed=\"NO\" AND title LIKE '"+ longBkTitle +"%'");
            ResultSet loanRs = st.executeQuery();
            
            int i = 0;
            while (loanRs.next()) {
                issuebookID = loanRs.getString("bklib_id");
                issuebookISBNList = loanRs.getString("book_isbn");
                issueauthorNameList = loanRs.getString("author");
                issuetitleNameList = loanRs.getString("title");
                issuepublisherList = loanRs.getString("publisher_name");
                issueeditionList = loanRs.getString("edition");
                issuecategoryList = loanRs.getString("subject_category");
                issuesystemIdList = loanRs.getString("book_id");

                issueModel.addRow(new Object[]{issuebookID, issuebookISBNList, issueauthorNameList, issuetitleNameList, issuepublisherList,issueeditionList,issuecategoryList,issuesystemIdList});
                i++;

            }

            if (i < 1) {
                JOptionPane.showMessageDialog(null, "This book is either issued, lost or not in the library database", "Error", JOptionPane.ERROR_MESSAGE);
                txtTitle.requestFocus();
            }
         
        } catch (ClassNotFoundException | SQLException | HeadlessException rt) {
            // System.out.println(rt);
            //JOptionPane.showMessageDialog(null, rt.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

}
        
        public void searchBooksIssueItem() {
        
        String itemSelected = (String) boxCat.getSelectedItem();
        String boorrowedCondtion = "NO";

        issueModel.setColumnIdentifiers(issueColumnNames);

        table1.setModel(issueModel);

        table1.setFillsViewportHeight(true);

        try {

            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT  book_id,bklib_id,book_isbn,author,title,publisher_name,edition,subject_category from books_db WHERE (borrowed='"+ boorrowedCondtion +"' AND subject_category='"+ itemSelected +"' )");
            ResultSet studentRs = st.executeQuery();
            
            int i = 0;
            while (studentRs.next()) {
                issuebookID = studentRs.getString("bklib_id");
                issuebookISBNList = studentRs.getString("book_isbn");
                issueauthorNameList = studentRs.getString("author");
                issuetitleNameList = studentRs.getString("title");
                issueeditionList = studentRs.getString("edition");
                issuesystemIdList = studentRs.getString("book_id");

                issueModel.addRow(new Object[]{issuebookID, issuebookISBNList, issueauthorNameList, issuetitleNameList,issueeditionList,issuesystemIdList});
                i++;
            }

            if (i < 1) {
                //JOptionPane.showMessageDialog(null, "all books for long loan have been issued", "Error", JOptionPane.ERROR_MESSAGE);
            }
         
        } catch (ClassNotFoundException | SQLException | HeadlessException rt) {
            // System.out.println(rt);
            JOptionPane.showMessageDialog(null, rt.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

}
        
    public void searchBooksLoanItem() {
        
        String itemSelected = (String) comboType.getSelectedItem();
        String boorrowedCondtion = "NO";

        issueModel.setColumnIdentifiers(issueColumnNames);

        table1.setModel(issueModel);

        table1.setFillsViewportHeight(true);

        try {

            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT  book_id,bklib_id,book_isbn,author,title,publisher_name,edition,subject_category from books_db WHERE (loan_type='"+ itemSelected +"' AND borrowed='"+ boorrowedCondtion +"')");
            ResultSet studentRs = st.executeQuery();
            
            int i = 0;
            while (studentRs.next()) {
                issuebookID = studentRs.getString("bklib_id");
                issuebookISBNList = studentRs.getString("book_isbn");
                issueauthorNameList = studentRs.getString("author");
                issuetitleNameList = studentRs.getString("title");
                issueeditionList = studentRs.getString("edition");
                issuesystemIdList = studentRs.getString("book_id");

                issueModel.addRow(new Object[]{issuebookID, issuebookISBNList, issueauthorNameList, issuetitleNameList,issueeditionList,issuesystemIdList});
                i++;
            }

            if (i < 1) {
                //JOptionPane.showMessageDialog(null, "all books for long loan have been issued", "Error", JOptionPane.ERROR_MESSAGE);
            }
         
        } catch (ClassNotFoundException | SQLException | HeadlessException rt) {
            // System.out.println(rt);
            JOptionPane.showMessageDialog(null, rt.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

}
    
    public void searchBooksAuth() {
    
        issueModel.setColumnIdentifiers(issueColumnNames);

        table1.setModel(issueModel);

        table1.setFillsViewportHeight(true);
       
        String longBkAuth = txtAuth.getText().toUpperCase().trim();
        
            try {

            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT book_id,bklib_id,book_isbn,author,title,publisher_name,edition,subject_category FROM books_db WHERE borrowed=\"NO\" AND author LIKE '"+ longBkAuth +"%'");
            ResultSet loanRs = st.executeQuery();
            
            int i = 0;
            while (loanRs.next()) {
                issuebookID = loanRs.getString("bklib_id");
                issuebookISBNList = loanRs.getString("book_isbn");
                issueauthorNameList = loanRs.getString("author");
                issuetitleNameList = loanRs.getString("title");
                issuepublisherList = loanRs.getString("publisher_name");
                issueeditionList = loanRs.getString("edition");
                issuecategoryList = loanRs.getString("subject_category");
                issuesystemIdList = loanRs.getString("book_id");

                issueModel.addRow(new Object[]{issuebookID, issuebookISBNList, issueauthorNameList, issuetitleNameList, issuepublisherList,issueeditionList,issuecategoryList,issuesystemIdList});
                i++;

            }

            if (i < 1) {
                JOptionPane.showMessageDialog(null, "This book is either issued, lost or not in the library database", "Error", JOptionPane.ERROR_MESSAGE);
                txtTitle.requestFocus();
            }
         
        } catch (ClassNotFoundException | SQLException | HeadlessException rt) {
            // System.out.println(rt);
            //JOptionPane.showMessageDialog(null, rt.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

}
    
    public void loadcomboStock() {
    try
        {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT cat_name FROM bookcat_table");
            ResultSet rs = st.executeQuery();
            while(rs.next()){   
                boxCat.addItem(rs.getString("cat_name"));
                }
            con.close();
            }
        catch(Exception e)
        {
            //System.out.println("Error"+e);
        }    
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox boxCat;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnIssue;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private com.toedter.calendar.JDateChooser chooserBorrowed;
    private com.toedter.calendar.JDateChooser chooserDate;
    private javax.swing.JComboBox comboType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblMaxdays;
    private javax.swing.JLabel maxNumberStaff;
    private javax.swing.JTextField numberTxt;
    private javax.swing.JPanel panelMain;
    private javax.swing.JTable table1;
    private javax.swing.JTable table2;
    private javax.swing.JTextField txtAuth;
    private javax.swing.JTextField txtBookID;
    private javax.swing.JTextField txtDept;
    private javax.swing.JTextField txtFname;
    private javax.swing.JTextField txtIdNumber;
    private javax.swing.JTextField txtLname;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtTitle;
    // End of variables declaration//GEN-END:variables
}
