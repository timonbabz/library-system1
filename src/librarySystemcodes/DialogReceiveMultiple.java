/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package librarySystemcodes;

import com.toedter.calendar.JTextFieldDateEditor;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author TimonBabz
 */
public final class DialogReceiveMultiple extends javax.swing.JDialog {

    /**
     * Creates new form DialogReceiveMultiple
     * @param parent
     * @param modal
     */
    
    public static String bookID1, bookISBNList1, authorNameList1, titleNameList1, publisherList1,shelflist1,editionList1,categoryList1,loanList1;
    
    public static String sysID,bookID,bookISBNList, authorNameList, titleNameList,publisherList,shelflist,editionList,categoryList,loanList,dateDue;
    String[] listColumnNames = {"System ID","Book ID","ISBN" ,"Author","Title", "Publisher","Shelf","Edition", "Category", "Loan Type", "Due date"};
    DefaultTableModel listModel = new DefaultTableModel();
    
    public DialogReceiveMultiple(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        loadcombocompany();
        txtId.requestFocus();
        btnLoad.setEnabled(false);
        Date date = new Date();
        chooserOn.setDate(date);
        chooserOn.setMaxSelectableDate(date);
        chooserOn.setMinSelectableDate(date);
        JTextFieldDateEditor dateChooser2 = (JTextFieldDateEditor)chooserOn.getDateEditor();
        dateChooser2.setEditable(false);
        JTextFieldDateEditor dateChooser3 = (JTextFieldDateEditor)chooserDue.getDateEditor();
        dateChooser3.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelReceive = new javax.swing.JPanel();
        txtId = new javax.swing.JTextField();
        comboStdStaff = new javax.swing.JComboBox();
        lblEnter = new javax.swing.JLabel();
        lblName = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        panelPen = new javax.swing.JPanel();
        comboUpdateCon = new javax.swing.JComboBox();
        txtPen = new javax.swing.JTextField();
        lblPen = new javax.swing.JLabel();
        btnAccept = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        chooserOn = new com.toedter.calendar.JDateChooser();
        lblReceive = new javax.swing.JLabel();
        scrollTable = new javax.swing.JScrollPane();
        tableReceive = new javax.swing.JTable();
        panelSearch = new javax.swing.JPanel();
        comboCat = new javax.swing.JComboBox();
        chooserDue = new com.toedter.calendar.JDateChooser();
        lblBkid = new javax.swing.JLabel();
        labelCat = new javax.swing.JLabel();
        txtBkId = new javax.swing.JTextField();
        lblDate = new javax.swing.JLabel();
        btnSearchDate = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        labelNumber = new javax.swing.JLabel();
        btnLoad = new javax.swing.JButton();
        deptForm = new javax.swing.JTextField();
        lblForm = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Library Management System");

        panelReceive.setBackground(new java.awt.Color(129, 186, 243));
        panelReceive.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Receive Multiple", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_TOP));

        txtId.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        txtId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtIdKeyPressed(evt);
            }
        });

        comboStdStaff.setBackground(new java.awt.Color(255, 255, 255));
        comboStdStaff.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Receive from :", "STUDENT", "STAFF" }));
        comboStdStaff.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboStdStaffItemStateChanged(evt);
            }
        });

        lblEnter.setText("Enter");

        lblName.setText("Name :");

        txtName.setEditable(false);

        panelPen.setBackground(new java.awt.Color(129, 186, 243));
        panelPen.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Updates", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        comboUpdateCon.setBackground(new java.awt.Color(255, 255, 255));
        comboUpdateCon.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Update book condition", "New", "Fine", "Very Good", "Fair/Acceptable", "Poor (Needs repair)" }));

        lblPen.setText("Penalties :");

        javax.swing.GroupLayout panelPenLayout = new javax.swing.GroupLayout(panelPen);
        panelPen.setLayout(panelPenLayout);
        panelPenLayout.setHorizontalGroup(
            panelPenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPenLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panelPenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPen)
                    .addGroup(panelPenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtPen, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(comboUpdateCon, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelPenLayout.setVerticalGroup(
            panelPenLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPenLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblPen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(comboUpdateCon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        btnAccept.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnAccept.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/acceptbookblack_16.png"))); // NOI18N
        btnAccept.setText("Accept");
        btnAccept.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnAccept.setContentAreaFilled(false);
        btnAccept.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAccept.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/acceptbookwhite_16.png"))); // NOI18N
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });

        btnCancel.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Cancelblack_16.png"))); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnCancel.setContentAreaFilled(false);
        btnCancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnCancel.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Cancelred_16.png"))); // NOI18N
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        chooserOn.setBackground(new java.awt.Color(129, 186, 243));

        lblReceive.setText("Received on :");

        tableReceive.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tableReceive.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableReceiveMouseClicked(evt);
            }
        });
        scrollTable.setViewportView(tableReceive);

        panelSearch.setBackground(new java.awt.Color(129, 186, 243));
        panelSearch.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Search by :", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP));

        comboCat.setBackground(new java.awt.Color(255, 255, 255));
        comboCat.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                comboCatItemStateChanged(evt);
            }
        });

        chooserDue.setBackground(new java.awt.Color(129, 186, 243));

        lblBkid.setText("Book ID :");

        labelCat.setText("Category :");

        txtBkId.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        txtBkId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtBkIdKeyPressed(evt);
            }
        });

        lblDate.setText("Due date :");

        btnSearchDate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Search_16.png"))); // NOI18N
        btnSearchDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnSearchDate.setContentAreaFilled(false);
        btnSearchDate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSearchDate.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Searchwhite_16.png"))); // NOI18N
        btnSearchDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchDateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSearchLayout = new javax.swing.GroupLayout(panelSearch);
        panelSearch.setLayout(panelSearchLayout);
        panelSearchLayout.setHorizontalGroup(
            panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSearchLayout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(lblDate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chooserDue, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearchDate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelCat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(comboCat, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblBkid)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtBkId, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        panelSearchLayout.setVerticalGroup(
            panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(chooserDue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panelSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboCat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtBkId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblBkid)
                        .addComponent(labelCat)
                        .addComponent(btnSearchDate, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(11, Short.MAX_VALUE))
        );

        btnClear.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/viewdetails_16.png"))); // NOI18N
        btnClear.setText("Clear table");
        btnClear.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnClear.setContentAreaFilled(false);
        btnClear.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnClear.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/viewdetailswhite_16.png"))); // NOI18N
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        labelNumber.setText("number");

        btnLoad.setBackground(new java.awt.Color(255, 255, 255));
        btnLoad.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnLoad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/load.png"))); // NOI18N
        btnLoad.setText("Load");
        btnLoad.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnLoad.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                btnLoadMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                btnLoadMouseExited(evt);
            }
        });
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });

        deptForm.setEditable(false);

        lblForm.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblForm.setText("From :");

        javax.swing.GroupLayout panelReceiveLayout = new javax.swing.GroupLayout(panelReceive);
        panelReceive.setLayout(panelReceiveLayout);
        panelReceiveLayout.setHorizontalGroup(
            panelReceiveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelReceiveLayout.createSequentialGroup()
                .addGroup(panelReceiveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelReceiveLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(panelReceiveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelReceiveLayout.createSequentialGroup()
                                .addComponent(lblEnter)
                                .addGap(3, 3, 3)
                                .addComponent(labelNumber, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(panelPen, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chooserOn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtName)
                            .addGroup(panelReceiveLayout.createSequentialGroup()
                                .addGroup(panelReceiveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboStdStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(panelReceiveLayout.createSequentialGroup()
                                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnLoad, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lblReceive)
                                    .addComponent(lblName))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelReceiveLayout.createSequentialGroup()
                                .addComponent(lblForm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(deptForm, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(panelReceiveLayout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(panelReceiveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnAccept, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(panelReceiveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollTable)
                    .addGroup(panelReceiveLayout.createSequentialGroup()
                        .addComponent(panelSearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        panelReceiveLayout.setVerticalGroup(
            panelReceiveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelReceiveLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(comboStdStaff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(panelReceiveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEnter)
                    .addComponent(labelNumber))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelReceiveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLoad))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelReceiveLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deptForm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblForm))
                .addGap(2, 2, 2)
                .addComponent(lblReceive)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chooserOn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelPen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnAccept, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelReceiveLayout.createSequentialGroup()
                .addComponent(panelSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollTable, javax.swing.GroupLayout.DEFAULT_SIZE, 469, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelReceive, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelReceive, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void comboStdStaffItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboStdStaffItemStateChanged
        if(comboStdStaff.getSelectedIndex() == 0){
        btnLoad.setEnabled(false);
        labelNumber.setText("waiting..");
        lblForm.setText("waiting..");
        txtId.setText("");
        deptForm.setText("");
        txtName.setText("");}
        else if(comboStdStaff.getSelectedIndex() == 1){
        labelNumber.setText("student number");
        lblForm.setText("Form :");
        btnLoad.setEnabled(true);}
        else if(comboStdStaff.getSelectedIndex() == 2){
        labelNumber.setText("staff ID number");
        lblForm.setText("Dept :");
        btnLoad.setEnabled(true);}
    }//GEN-LAST:event_comboStdStaffItemStateChanged

    private void btnLoadMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLoadMouseEntered
        btnLoad.setForeground(Color.GREEN);
    }//GEN-LAST:event_btnLoadMouseEntered

    private void btnLoadMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnLoadMouseExited
        btnLoad.setForeground(Color.BLACK);
    }//GEN-LAST:event_btnLoadMouseExited

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        if(comboStdStaff.getSelectedIndex() == 0){
        JOptionPane.showMessageDialog(null, "Please select whether student or staff from dropdown");}
        else if(comboStdStaff.getSelectedIndex() == 1){
        retrieveStudentDetails();
        refreshBooksBorrwed();}
        else if(comboStdStaff.getSelectedIndex() == 2){
        retrieveStaffDetails();
        refreshBooksBorrwed();}
    }//GEN-LAST:event_btnLoadActionPerformed

    private void txtIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
        if(comboStdStaff.getSelectedIndex() == 0){
        JOptionPane.showMessageDialog(null, "Please select whether student or staff from dropdown");}
        else if(comboStdStaff.getSelectedIndex() == 1){
        retrieveStudentDetails();
        refreshBooksBorrwed();}
        else if(comboStdStaff.getSelectedIndex() == 2){
        retrieveStaffDetails();
        refreshBooksBorrwed();}
        }
    }//GEN-LAST:event_txtIdKeyPressed

    private void btnSearchDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchDateActionPerformed
        refreshBooksBorrwedDate();
    }//GEN-LAST:event_btnSearchDateActionPerformed

    private void comboCatItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_comboCatItemStateChanged
       refreshBooksBorrwedCat();
    }//GEN-LAST:event_comboCatItemStateChanged

    private void txtBkIdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtBkIdKeyPressed
       if(evt.getKeyCode() == KeyEvent.VK_ENTER){
       refreshBooksBorrwedId();}
    }//GEN-LAST:event_txtBkIdKeyPressed

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        if(tableReceive.getRowCount() == 0){
        JOptionPane.showMessageDialog(null, "Table has no data");}
        else{
            if(txtId.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please enter Id first");
            txtId.requestFocus();}
            else if(txtPen.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please update penalties, indicate none if no penalty");
            txtPen.requestFocus();}
            else if(comboUpdateCon.getSelectedIndex() == 0){
            JOptionPane.showMessageDialog(null, "Please update book condition");}
            else if(comboStdStaff.getSelectedIndex() == 1){
                receiveFromStudents();
            refreshBooksBorrwed();}
            else if(comboStdStaff.getSelectedIndex() == 2){
                receiveFromStaff();
            refreshBooksBorrwed();}
        }
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void tableReceiveMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableReceiveMouseClicked
        JOptionPane.showMessageDialog(null, "Editing not allowed in table");
    }//GEN-LAST:event_tableReceiveMouseClicked

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        txtId.setText("");
        txtName.setText("");
        deptForm.setText("");
        txtPen.setText("");
        comboUpdateCon.setSelectedIndex(0);
        comboStdStaff.setSelectedIndex(0);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        DefaultTableModel clearedModel = (DefaultTableModel) tableReceive.getModel();
        clearedModel.setRowCount(0);
    }//GEN-LAST:event_btnClearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DialogReceiveMultiple.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DialogReceiveMultiple.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DialogReceiveMultiple.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DialogReceiveMultiple.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            DialogReceiveMultiple dialog = new DialogReceiveMultiple(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }
    
    public void retrieveStudentDetails() {
            String statusStd = "Active";
            try {
            
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb?useSSL = false", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT std_fname, std_lname, form,stream FROM student_list WHERE adm_no='"+ txtId.getText()+"' AND status='"+ statusStd +"'");
            ResultSet rsRetStd = st.executeQuery();
            boolean emptyRs = true;
            if (rsRetStd.next()) {
                emptyRs = false;
                String fname_std = rsRetStd.getString("std_fname").toUpperCase();
                
                String lname_std = rsRetStd.getString("std_lname").toUpperCase();
                txtName.setText(fname_std+" "+lname_std);
                
                String class_std = rsRetStd.getString("form");
                String class_stream = rsRetStd.getString("stream").toUpperCase();
                deptForm.setText(class_std+" "+class_stream);

            }
            if (emptyRs) {
                JOptionPane.showMessageDialog(null, "Student not found or record for No:"+txtId.getText()+" has been closed");
                comboStdStaff.setSelectedIndex(0);
                txtId.setText("");
            }
            
        } catch (ClassNotFoundException | SQLException | HeadlessException rt) {
            System.out.println(rt);
            JOptionPane.showMessageDialog(null, "No Record Found", "Error", JOptionPane.ERROR_MESSAGE); 
        }
        
    }
    
    public void retrieveStaffDetails() {
    
            String statusStaff = "Active";
            try {
            
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb?useSSL = false", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT staff_fname, staff_lname, dept, phone_no FROM staff_table WHERE id_number='"+ txtId.getText()+"' AND status='"+ statusStaff +"'");
            ResultSet rsRetStd = st.executeQuery();
            boolean emptyRs = true;
            if (rsRetStd.next()) {
                emptyRs = false;
                String fname_stf = rsRetStd.getString("staff_fname").toUpperCase();
                String lname_stf = rsRetStd.getString("staff_lname").toUpperCase();
                txtName.setText(fname_stf+" "+lname_stf);
                
                String deptName = rsRetStd.getString("dept").toUpperCase();
                deptForm.setText(deptName);

            }
            if (emptyRs) {
                JOptionPane.showMessageDialog(null, "Staff not found in the library records or record is closed");
                comboStdStaff.setSelectedIndex(0);
                txtId.setText("");
            }
            
        } catch (ClassNotFoundException | SQLException | HeadlessException rt) {
            System.out.println(rt);
            JOptionPane.showMessageDialog(null, "No Record Found", "Error", JOptionPane.ERROR_MESSAGE); 
        }
        
    }
    
    public void refreshBooksBorrwed(){
    while (listModel.getRowCount() != 0) {
         listModel.removeRow(0);
          }
        displayBooks();}
    
    public void refreshBooksBorrwedDate(){
    while (listModel.getRowCount() != 0) {
         listModel.removeRow(0);
          }
        displayBooksDate();}
    
    public void refreshBooksBorrwedCat(){
    while (listModel.getRowCount() != 0) {
         listModel.removeRow(0);
          }
        displayBooksCat();}
    
    public void refreshBooksBorrwedId(){
    while (listModel.getRowCount() != 0) {
         listModel.removeRow(0);
          }
        displayBooksId();}
    
    public void displayBooks() {
    
        String boorrowedCondtion = "YES";
        String idNo = txtId.getText().trim();

        listModel.setColumnIdentifiers(listColumnNames);

        tableReceive.setModel(listModel);

        tableReceive.setFillsViewportHeight(true);

        try {

            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT  book_id,bklib_id,book_isbn,author,title,shelf,publisher_name,edition,subject_category,loan_type,date_due FROM books_db WHERE borrowed_by_id='"+ idNo +"' AND borrowed=\"YES\"");
            ResultSet staffRs = st.executeQuery();
            //;
            int i = 0;
            while (staffRs.next()) {
                sysID = staffRs.getString("book_id");
                bookID = staffRs.getString("bklib_id");
                bookISBNList = staffRs.getString("book_isbn");
                authorNameList = staffRs.getString("author");
                titleNameList = staffRs.getString("title");
                publisherList = staffRs.getString("publisher_name");
                shelflist = staffRs.getString("shelf");
                editionList = staffRs.getString("edition");
                categoryList = staffRs.getString("subject_category");
                loanList = staffRs.getString("loan_type");
                dateDue = staffRs.getString("date_due");

                listModel.addRow(new Object[]{sysID,bookID,bookISBNList, authorNameList, titleNameList,publisherList,shelflist,editionList,categoryList,loanList,dateDue});
                i++;

            }

            if (i < 1) {
                //JOptionPane.showMessageDialog(null, "no record", "Error", JOptionPane.ERROR_MESSAGE);
            }
         
        } catch (ClassNotFoundException | SQLException | HeadlessException rt) {
            // System.out.println(rt);
            JOptionPane.showMessageDialog(null, rt.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

}

    public void displayBooksDate() {
    
        SimpleDateFormat sdf = new SimpleDateFormat("MMM d, yyyy");
        String pubDate =  sdf.format(chooserDue.getDate());
        String boorrowedCondtion = "YES";
        String idNo = txtId.getText().trim();

        listModel.setColumnIdentifiers(listColumnNames);

        tableReceive.setModel(listModel);

        tableReceive.setFillsViewportHeight(true);

        try {

            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT  book_id,bklib_id,book_isbn,author,title,shelf,publisher_name,edition,subject_category,loan_type,date_due FROM books_db WHERE (borrowed_by_id='"+ idNo +"' AND borrowed='"+boorrowedCondtion+"' AND date_due='"+pubDate+"')");
            ResultSet staffRs = st.executeQuery();
            //;
            int i = 0;
            while (staffRs.next()) {
                sysID = staffRs.getString("book_id");
                bookID = staffRs.getString("bklib_id");
                bookISBNList = staffRs.getString("book_isbn");
                authorNameList = staffRs.getString("author");
                titleNameList = staffRs.getString("title");
                publisherList = staffRs.getString("publisher_name");
                shelflist = staffRs.getString("shelf");
                editionList = staffRs.getString("edition");
                categoryList = staffRs.getString("subject_category");
                loanList = staffRs.getString("loan_type");
                dateDue = staffRs.getString("date_due");

                listModel.addRow(new Object[]{sysID,bookID,bookISBNList, authorNameList, titleNameList,publisherList,shelflist,editionList,categoryList,loanList,dateDue});
                i++;

            }

            if (i < 1) {
                //JOptionPane.showMessageDialog(null, "no record", "Error", JOptionPane.ERROR_MESSAGE);
            }
         
        } catch (ClassNotFoundException | SQLException | HeadlessException rt) {
            // System.out.println(rt);
            JOptionPane.showMessageDialog(null, rt.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

}
    
    public void displayBooksCat() {
    
        String category = (String) comboCat.getSelectedItem();
        String boorrowedCondtion = "YES";
        String idNo = txtId.getText().trim();

        listModel.setColumnIdentifiers(listColumnNames);

        tableReceive.setModel(listModel);

        tableReceive.setFillsViewportHeight(true);

        try {

            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT  book_id,bklib_id,book_isbn,author,title,shelf,publisher_name,edition,subject_category,loan_type,date_due FROM books_db WHERE (borrowed_by_id='"+ idNo +"' AND borrowed='"+ boorrowedCondtion +"' AND subject_category='"+category+"')");
            ResultSet staffRs = st.executeQuery();
            //;
            int i = 0;
            while (staffRs.next()) {
                sysID = staffRs.getString("book_id");
                bookID = staffRs.getString("bklib_id");
                bookISBNList = staffRs.getString("book_isbn");
                authorNameList = staffRs.getString("author");
                titleNameList = staffRs.getString("title");
                publisherList = staffRs.getString("publisher_name");
                shelflist = staffRs.getString("shelf");
                editionList = staffRs.getString("edition");
                categoryList = staffRs.getString("subject_category");
                loanList = staffRs.getString("loan_type");
                dateDue = staffRs.getString("date_due");

                listModel.addRow(new Object[]{sysID,bookID,bookISBNList, authorNameList, titleNameList,publisherList,shelflist,editionList,categoryList,loanList,dateDue});
                i++;

            }

            if (i < 1) {
                //JOptionPane.showMessageDialog(null, "no record", "Error", JOptionPane.ERROR_MESSAGE);
            }
         
        } catch (ClassNotFoundException | SQLException | HeadlessException rt) {
            // System.out.println(rt);
            JOptionPane.showMessageDialog(null, rt.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

}
    
    public void displayBooksId() {
    
        String bookId = txtBkId.getText().trim();
        String boorrowedCondtion = "YES";
        String idNo = txtId.getText().trim();

        listModel.setColumnIdentifiers(listColumnNames);

        tableReceive.setModel(listModel);

        tableReceive.setFillsViewportHeight(true);

        try {

            Class.forName("com.mysql.jdbc.Driver");
            Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT  book_id,bklib_id,book_isbn,author,title,shelf,publisher_name,edition,subject_category,loan_type,date_due FROM books_db WHERE (borrowed_by_id='"+ idNo +"'AND borrowed='"+ boorrowedCondtion +"' AND bklib_id='"+bookId+"')");
            ResultSet staffRs = st.executeQuery();
            //;
            int i = 0;
            while (staffRs.next()) {
                sysID = staffRs.getString("book_id");
                bookID = staffRs.getString("bklib_id");
                bookISBNList = staffRs.getString("book_isbn");
                authorNameList = staffRs.getString("author");
                titleNameList = staffRs.getString("title");
                publisherList = staffRs.getString("publisher_name");
                shelflist = staffRs.getString("shelf");
                editionList = staffRs.getString("edition");
                categoryList = staffRs.getString("subject_category");
                loanList = staffRs.getString("loan_type");
                dateDue = staffRs.getString("date_due");

                listModel.addRow(new Object[]{sysID,bookID,bookISBNList, authorNameList, titleNameList,publisherList,shelflist,editionList,categoryList,loanList,dateDue});
                i++;

            }

            if (i < 1) {
                //JOptionPane.showMessageDialog(null, "no record", "Error", JOptionPane.ERROR_MESSAGE);
            }
         
        } catch (ClassNotFoundException | SQLException | HeadlessException rt) {
            // System.out.println(rt);
            JOptionPane.showMessageDialog(null, rt.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

}
    
    public void receiveFromStudents(){
        
        String returnString = "YES";
        String condi = "NO";
        String nuulSt = "NULL";
        Date dateRec = chooserOn.getDate();
        String penalties = txtPen.getText().trim();
        String bookCon = (String) comboUpdateCon.getSelectedItem();
        String librarianName = LibrarySignIn.unameLabel;
        String librarianID = LibrarySignIn.userId;
        try{

        int rows=tableReceive.getRowCount();
        Class.forName("com.mysql.jdbc.Driver");
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb?useSSL = false", "root", "libsystem@dmin");
        con.setAutoCommit(false);
        
        for(int row = 0; row<rows; row++)
        {
           String bookId = (String)tableReceive.getValueAt(row, 0);
           String dateDueOn = (String) tableReceive.getValueAt(row, 10);
            
           String queryco = "UPDATE student_db SET returned='" + returnString + "',received_by_id='" + librarianID + "',received_by='" + librarianName + "' WHERE book_id='" + bookId +"' AND date_due='"+ dateDueOn +"'";
           PreparedStatement pst = con.prepareStatement(queryco);
           pst.execute();
            
           String querycondi = "UPDATE books_db SET borrowed='" + condi + "',borrowed_by_id=NULL ,name1_of_borrower='" + nuulSt + "',name2_of_borrower='" + nuulSt + "'"
                        + ",staff_std='" + nuulSt + "',date_due=NULL ,received_on='" + dateRec + "',penalties='" + penalties + "',book_condition='" + bookCon + "',date_borrowed='" + nuulSt + "' WHERE book_id='" + bookId +"'";
           PreparedStatement pstCON = con.prepareStatement(querycondi);
           pstCON.execute();
           
           String sql3 = "DELETE FROM borrowers_db WHERE book_id=" + bookId;
           PreparedStatement pstDel = con.prepareStatement(sql3);
           pstDel.execute();
  
        }
        con.commit();
        JOptionPane.showMessageDialog(null, "Books in table have been received");
        }
        catch(ClassNotFoundException | SQLException e){
            JOptionPane.showMessageDialog(this,e.getMessage());
       }

}
    
        public void receiveFromStaff(){
        
        String returnString = "YES";
        String condi = "NO";
        String nuulSt = "NULL";
        Date dateRec = chooserOn.getDate();
        String penalties = txtPen.getText().trim();
        String bookCon = (String) comboUpdateCon.getSelectedItem();
        String librarianName = LibrarySignIn.unameLabel;
        String librarianID = LibrarySignIn.userId;
        try{

        int rows=tableReceive.getRowCount();
        Class.forName("com.mysql.jdbc.Driver");
        Connection con = DriverManager.getConnection("jdbc:mysql://localhost/libdb?useSSL = false", "root", "libsystem@dmin");
        con.setAutoCommit(false);
        
        for(int row = 0; row<rows; row++)
        {
           String bookId = (String)tableReceive.getValueAt(row, 0);
           String dateDueOn = (String) tableReceive.getValueAt(row, 10);
            
           String queryco = "UPDATE staff_db SET returned='" + returnString + "',received_by_id='" + librarianID + "',received_by='" + librarianName + "'WHERE (book_id='" + bookId +"' AND date_due='"+ dateDueOn +"')";
           PreparedStatement pst = con.prepareStatement(queryco);
           pst.execute();
            
           String querycondi = "UPDATE books_db SET borrowed='" + condi + "',borrowed_by_id=NULL ,name1_of_borrower='" + nuulSt + "',name2_of_borrower='" + nuulSt + "'"
                        + ",staff_std='" + nuulSt + "',date_due=NULL ,received_on='" + dateRec + "',penalties='" + penalties + "',book_condition='" + bookCon + "',date_borrowed='" + nuulSt + "' WHERE book_id='" + bookId +"'";
           PreparedStatement pstCON = con.prepareStatement(querycondi);
           pstCON.execute();
           
           String sql3 = "DELETE FROM borrowers_db WHERE book_id=" + bookId;
           PreparedStatement pstDel = con.prepareStatement(sql3);
           pstDel.execute();
  
        }
        con.commit();
        JOptionPane.showMessageDialog(null, "Books in table have been received");
        }
        catch(ClassNotFoundException | SQLException e){
            JOptionPane.showMessageDialog(this,e.getMessage());
       }

}

    public void loadcombocompany(){
        try
        {
            Class.forName("com.mysql.jdbc.Driver");
            try (Connection conn = DriverManager.getConnection("jdbc:mysql://localhost/libdb", "root", "libsystem@dmin")) {
                PreparedStatement st = conn.prepareStatement("SELECT cat_name FROM bookcat_table");
                ResultSet rs = st.executeQuery();
                while(rs.next()){
                    comboCat.addItem(rs.getString("cat_name"));
                }
              }
            }
        catch(Exception e)
        {
            //System.out.println("Error"+e);
        }    
}
        
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnLoad;
    private javax.swing.JButton btnSearchDate;
    private com.toedter.calendar.JDateChooser chooserDue;
    private com.toedter.calendar.JDateChooser chooserOn;
    private javax.swing.JComboBox comboCat;
    private javax.swing.JComboBox comboStdStaff;
    private javax.swing.JComboBox comboUpdateCon;
    private javax.swing.JTextField deptForm;
    private javax.swing.JLabel labelCat;
    private javax.swing.JLabel labelNumber;
    private javax.swing.JLabel lblBkid;
    private javax.swing.JLabel lblDate;
    private javax.swing.JLabel lblEnter;
    private javax.swing.JLabel lblForm;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblPen;
    private javax.swing.JLabel lblReceive;
    private javax.swing.JPanel panelPen;
    private javax.swing.JPanel panelReceive;
    private javax.swing.JPanel panelSearch;
    private javax.swing.JScrollPane scrollTable;
    private javax.swing.JTable tableReceive;
    private javax.swing.JTextField txtBkId;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtPen;
    // End of variables declaration//GEN-END:variables
}
