/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package librarySystemcodes;

import java.awt.HeadlessException;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author TimonBabz
 */
public final class DialogDepart extends javax.swing.JDialog {

    /**
     * Creates new form DialogDepart
     * @param parent
     * @param modal
     */
    
    Connection con = null;
    Statement statement = null;
    
    public static String deptNo = "", deptName = "";
    String[] columnNames = {"Department ID", "Department name"};
    DefaultTableModel deptModel = new DefaultTableModel();
    
    public DialogDepart(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        displayDepartments();
        txtDeptEdit.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelDept = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableDept = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        txtDeptNew = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtDeptID = new javax.swing.JTextField();
        btnFind = new javax.swing.JButton();
        txtDeptEdit = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtIdDelete = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtDeptDelete = new javax.swing.JTextField();
        btnDelete = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Library Management System");
        setResizable(false);

        panelDept.setBackground(new java.awt.Color(129, 186, 243));
        panelDept.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)), "Add Departments", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.BELOW_TOP));

        tableDept.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableDept);

        jLabel1.setText("Enter new department name :");

        txtDeptNew.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N

        btnSave.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Save_16.png"))); // NOI18N
        btnSave.setText("Save");
        btnSave.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnSave.setContentAreaFilled(false);
        btnSave.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSave.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Savewhite_16.png"))); // NOI18N
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel2.setText("Update/Edit Department name :");

        jLabel3.setText("Enter department ID :");

        txtDeptID.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        txtDeptID.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        btnFind.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnFind.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Search_16.png"))); // NOI18N
        btnFind.setText("Find");
        btnFind.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnFind.setContentAreaFilled(false);
        btnFind.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnFind.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Searchwhite_16.png"))); // NOI18N
        btnFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFindActionPerformed(evt);
            }
        });

        txtDeptEdit.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N

        jLabel4.setText("Edit :");

        jLabel5.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel5.setText("Delete :");

        txtIdDelete.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        txtIdDelete.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtIdDelete.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtIdDeleteKeyPressed(evt);
            }
        });

        jLabel6.setText("Enter department ID :");

        txtDeptDelete.setEditable(false);
        txtDeptDelete.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N

        btnDelete.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Deletenote_16.png"))); // NOI18N
        btnDelete.setText("Delete");
        btnDelete.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnDelete.setContentAreaFilled(false);
        btnDelete.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnDelete.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Deletered_16.png"))); // NOI18N
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        btnUpdate.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/createBlack_16.png"))); // NOI18N
        btnUpdate.setText("Update");
        btnUpdate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        btnUpdate.setContentAreaFilled(false);
        btnUpdate.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUpdate.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Editwhite_16.png"))); // NOI18N
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        jLabel7.setText("(Enter department ID and press enter)");

        javax.swing.GroupLayout panelDeptLayout = new javax.swing.GroupLayout(panelDept);
        panelDept.setLayout(panelDeptLayout);
        panelDeptLayout.setHorizontalGroup(
            panelDeptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(panelDeptLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelDeptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelDeptLayout.createSequentialGroup()
                        .addGroup(panelDeptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelDeptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(panelDeptLayout.createSequentialGroup()
                                .addComponent(txtDeptID, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnFind, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtDeptEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelDeptLayout.createSequentialGroup()
                                .addComponent(txtIdDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDeptDelete)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(panelDeptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 71, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(panelDeptLayout.createSequentialGroup()
                        .addGroup(panelDeptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelDeptLayout.createSequentialGroup()
                                .addGap(15, 15, 15)
                                .addGroup(panelDeptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addGroup(panelDeptLayout.createSequentialGroup()
                                        .addComponent(txtDeptNew, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(jLabel2)
                            .addGroup(panelDeptLayout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        panelDeptLayout.setVerticalGroup(
            panelDeptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelDeptLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelDeptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDeptNew, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSave, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDeptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnFind, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelDeptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(txtDeptID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDeptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDeptEdit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(panelDeptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelDeptLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtIdDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(txtDeptDelete, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelDept, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelDept, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if(txtDeptNew.getText().isEmpty()){
        JOptionPane.showMessageDialog(null, "Please enter a department name to add");}
        else{
        addDepartment();}
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFindActionPerformed
        if(txtDeptID.getText().isEmpty()){
        JOptionPane.showMessageDialog(null, "Please enter the ID to search, see from table");}
        else{
        retrieveDetails();}
    }//GEN-LAST:event_btnFindActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if(txtDeptID.getText().isEmpty()){
        JOptionPane.showMessageDialog(null, "ID field cannot be empty");}
        if(txtDeptID.getText().equals("1")){
        JOptionPane.showMessageDialog(null, "Default cannot be edited");
        txtDeptEdit.setText("");
        txtDeptID.setText("");}
        else if(txtDeptEdit.getText().isEmpty()){
        JOptionPane.showMessageDialog(null, "Department field cannot be empty");}
        else if(txtDeptEdit.getText().equalsIgnoreCase("default")){
        JOptionPane.showMessageDialog(null, "Default cannot be edited");
        txtDeptEdit.setText("");
        txtDeptID.setText("");}
        else{
        CheckDeptExistsUpdate();}
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        if(txtIdDelete.getText().isEmpty()){
        JOptionPane.showMessageDialog(null, "ID cannot be empty");
        txtIdDelete.requestFocus();
        txtDeptDelete.setText("");}
        else if(txtIdDelete.getText().equals("1")){
        JOptionPane.showMessageDialog(null, "Default cannot be deleted");
        txtDeptDelete.setText("");
        txtIdDelete.setText("");}
        else if(txtDeptDelete.getText().isEmpty()){
        JOptionPane.showMessageDialog(null, "Department name cannot be empty");}
        else if(txtDeptDelete.getText().equalsIgnoreCase("default")){
        JOptionPane.showMessageDialog(null, "Default cannot be deleted");
        txtDeptDelete.setText("");
        txtIdDelete.setText("");}
        else{CheckDeptExistsDelete();
        txtIdDelete.setText("");
        txtDeptDelete.setText("");}
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void txtIdDeleteKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdDeleteKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
            if(txtIdDelete.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please enter the ID and press enter, see ID from table");}
            else{retrieveDetailsDelete();}
        }
    }//GEN-LAST:event_txtIdDeleteKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DialogDepart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DialogDepart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DialogDepart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DialogDepart.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(() -> {
            DialogDepart dialog = new DialogDepart(new javax.swing.JFrame(), true);
            dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosing(java.awt.event.WindowEvent e) {
                    System.exit(0);
                }
            });
            dialog.setVisible(true);
        });
    }
    
    public void refreshList(){
    while(deptModel.getRowCount() != 0){
        deptModel.removeRow(0);}
    displayDepartments();
    }

    public void displayDepartments() {

        deptModel.setColumnIdentifiers(columnNames);

        tableDept.setModel(deptModel);

        tableDept.setFillsViewportHeight(true);
        
        try {

            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/libdb", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT dept_id,dept_name FROM depart");
            ResultSet rsIssue = st.executeQuery();

            int i = 0;
            while (rsIssue.next()) {
                deptNo = rsIssue.getString("dept_id");
                deptName = rsIssue.getString("dept_name");

                deptModel.addRow(new Object[]{deptNo, deptName});
                i++;

            }

            if (i < 1) {
                JOptionPane.showMessageDialog(null, "Table has no departments set yet", "Error", JOptionPane.ERROR_MESSAGE);
            }
         
        } catch (ClassNotFoundException | SQLException | HeadlessException rt) {
            // System.out.println(rt);
            JOptionPane.showMessageDialog(null, rt.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }

}
    
    public void addDepartment(){
        
                String newName = txtDeptNew.getText().toUpperCase().trim();
                    try {
                    Class.forName("com.mysql.jdbc.Driver");

                    con = DriverManager.getConnection("jdbc:mysql://localhost/libdb", "root", "libsystem@dmin");
                    statement = con.createStatement();

                    // SQL Insert
                    String sql = "INSERT INTO depart " + "(dept_name)"
                            + "VALUES('"+ newName + "') ";
                    
                    statement.execute(sql);

                    JOptionPane.showMessageDialog(null,  newName + "," + System.lineSeparator() + ""
                            + " Added successfully");
                    
                    refreshList();

                    // Reset Text Fields
                    txtDeptNew.setText("");
                    //status  = true;

                } catch (ClassNotFoundException | SQLException | HeadlessException es) {
                    // TODO Auto-generated catch block
                    JOptionPane.showMessageDialog(null, "Unable to add");
                    JOptionPane.showMessageDialog(null, es.getMessage());
                }

                try {
                    if (statement != null) {
                        statement.close();
                        con.close();
                    }
                } catch (SQLException es) {
                    // TODO Auto-generated catch block
                    JOptionPane.showMessageDialog(null, es.getMessage());
                }
    }
    
    public void retrieveDetails() {
    
            String catIdSe = txtDeptID.getText().trim();
            try {
            
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/libdb?useSSL = false", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT dept_name FROM depart WHERE (dept_id='"+ catIdSe +"')");
            ResultSet rs = st.executeQuery();
            boolean emptyRs = true;
            if (rs.next()) {
                emptyRs = false;
                String namecomp = rs.getString("dept_name");
                
                txtDeptEdit.setText(namecomp);
                
            }
            if (emptyRs) {
                JOptionPane.showMessageDialog(null, "Entered ID doesn't exist");
                txtDeptID.requestFocus();
                txtDeptEdit.setEditable(false);
            }else{
            txtDeptEdit.setEditable(true);}
            
        } catch (ClassNotFoundException | SQLException | HeadlessException rt) {
            // System.out.println(rt);
            //JOptionPane.showMessageDialog(null, "No Record Found", "Error", JOptionPane.ERROR_MESSAGE); 
        }
        
    }
    
    public void retrieveDetailsDelete() {
    
            String catIdSe = txtIdDelete.getText().trim();
            try {
            
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost/libdb?useSSL = false", "root", "libsystem@dmin");
            PreparedStatement st = con.prepareStatement("SELECT dept_name FROM depart WHERE (dept_id='"+ catIdSe +"')");
            ResultSet rs = st.executeQuery();
            boolean emptyRs = true;
            if (rs.next()) {
                emptyRs = false;
                String namecomp = rs.getString("dept_name");
                
                txtDeptDelete.setText(namecomp);
                
            }
            if (emptyRs) {
                JOptionPane.showMessageDialog(null, "Entered ID doesn't exist");
                txtIdDelete.requestFocus();
                txtDeptDelete.setText("");
                txtIdDelete.setText("");
            }
            
        } catch (ClassNotFoundException | SQLException | HeadlessException rt) {
            // System.out.println(rt);
            //JOptionPane.showMessageDialog(null, "No Record Found", "Error", JOptionPane.ERROR_MESSAGE); 
        }
        
    }
    
    public void updateDept(){
        String compaId = txtDeptID.getText();
        String newDeptName = txtDeptEdit.getText().toUpperCase().trim();
       
                try {
            String url = "jdbc:mysql://localhost/libdb?useSSL = false";
            Connection conn;
            conn = DriverManager.getConnection(url, "root", "libsystem@dmin");
            //compName,contacts,rep_name,rep_cont FROM company_table 
            //--------update users db-----------
            String sql = "UPDATE depart SET dept_name='" + newDeptName + "' WHERE dept_id=" + compaId;
            
            PreparedStatement pst = null;
            pst = conn.prepareStatement(sql);
            pst.execute();
            //UPDATE staff_table INNER JOIN depart ON dept_id = dep_id SET dept = 'info' WHERE dep_id = '5'
            String sql2 = "UPDATE staff_table INNER JOIN depart ON dept_id = dep_id SET dept='" + newDeptName + "' WHERE dep_id='"+ compaId +"'";
                
                PreparedStatement pst2 = null;
                pst2 = conn.prepareStatement(sql2);
                pst2.execute();
            
            String sql3 = "UPDATE staff_db INNER JOIN depart ON dept_id = dep_id SET dept='" + newDeptName + "' WHERE dep_id='"+ compaId +"'";
                
                PreparedStatement pst3 = null;
                pst3 = conn.prepareStatement(sql3);
                pst3.execute();
                
            String sql4 = "UPDATE users_db INNER JOIN depart ON dept_id = dep_id SET department='" + newDeptName + "' WHERE dep_id='"+ compaId +"'";
                
                PreparedStatement pst4 = null;
                pst4 = conn.prepareStatement(sql4);
                pst4.execute(); 
                
            JOptionPane.showMessageDialog(null, "Updated successfully");
            refreshList();
            
                txtDeptEdit.setText("");
                txtDeptID.setText("");
                txtDeptEdit.setEditable(false);
            
            } catch (SQLException | HeadlessException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        
    }
    
    public void CheckDeptExistsUpdate(){
 
        String enteredUser = txtDeptID.getText().trim();

        try
        {

            Class.forName("com.mysql.jdbc.Driver");
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/libdb?useSSL = false", "root", "libsystem@dmin");

            PreparedStatement st = connection.prepareStatement("SELECT* FROM depart WHERE dept_id='" + enteredUser + "'");
            ResultSet r1=st.executeQuery();

             if(r1.next()) 
             {
               updateDept();
             }else{
                 JOptionPane.showMessageDialog(null, "Entered ID does not exist");
             txtDeptID.requestFocus();}
         }

         catch (SQLException | ClassNotFoundException e) 
         {
            JOptionPane.showMessageDialog(null, e.getMessage());
         }

 }
    
    public void CheckDeptExistsDelete(){
 
        String enteredUser = txtIdDelete.getText().trim();

        try
        {

            Class.forName("com.mysql.jdbc.Driver");
            Connection connection = DriverManager.getConnection("jdbc:mysql://localhost/libdb?useSSL = false", "root", "libsystem@dmin");

            PreparedStatement st = connection.prepareStatement("SELECT* FROM depart WHERE dept_id='" + enteredUser + "'");
            ResultSet r1=st.executeQuery();

             if(r1.next()) 
             {
               deleteFromDept();
             }else{
                 JOptionPane.showMessageDialog(null, "Entered ID does not exist");
             txtIdDelete.requestFocus();}
         }

         catch (SQLException | ClassNotFoundException e) 
         {
            JOptionPane.showMessageDialog(null, e.getMessage());
         }

 }
    
    public void deleteFromDept() {                                        
        
        String returnString = txtIdDelete.getText();
        
            try {
                String url = "jdbc:mysql://localhost/libdb?useSSL = false";
                Connection con2 = DriverManager.getConnection(url, "root", "libsystem@dmin");
                statement = con2.createStatement();
                String sql2 = "DELETE FROM depart WHERE dept_id='"+returnString+"'";
                statement.execute(sql2);
               
                JOptionPane.showMessageDialog(null, "RECORD DELETED");
                refreshList();

            } catch (SQLException | HeadlessException e) {
                JOptionPane.showMessageDialog(null, e);
            }
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelDept;
    private javax.swing.JTable tableDept;
    private javax.swing.JTextField txtDeptDelete;
    private javax.swing.JTextField txtDeptEdit;
    private javax.swing.JTextField txtDeptID;
    private javax.swing.JTextField txtDeptNew;
    private javax.swing.JTextField txtIdDelete;
    // End of variables declaration//GEN-END:variables
}
